---
title: "Analyze Tesla"
author: "Alan Jackson"
format: html
editor: visual
---

## Analyze Tesla data

The tesla data comes from several sources, so we will compare and contrast.

We have the original solar panels, which are on one account, the new solar
panels and batteries, on a different account, and for both we have data
downloaded from the app as well as data downloaded with python code off
the web.

```{r init}
#| echo: false

library(tidyverse)
library(lubridate)
library(scales)

path <- "/home/ajackson/Dropbox/Rprojects/Tulane_Solar/Data/"

Solar_old <- readRDS(paste0(path, "Solar_old.rds"))
Solar_new <- readRDS(paste0(path, "Solar_new.rds"))
App_old <- readRDS(paste0(path, "App_old.rds"))
App_new <- readRDS(paste0(path, "App_new.rds"))

```

##        Make some plots

```{r first plots}

#   Solar_old June 2019, December 2022

Solar_old %>% 
  filter((month(Timestamp)==6) & (year(Timestamp)==2019)) %>% 
  filter(day(Timestamp)<8) %>% 
  ggplot(aes(x=Timestamp, y=Solar_W)) +
  #geom_point()+
  geom_line()

Solar_old %>% 
  filter((month(Timestamp)==12) & (year(Timestamp)==2022)) %>% 
  filter(day(Timestamp)<8) %>% 
  ggplot(aes(x=Timestamp, y=Solar_W)) +
  #geom_point()+
  geom_line()

App_old_sub <- App_old %>%
  filter((month(Date)==12) & (year(Date)==2022)) %>%
  filter(day(Date)<8) %>%
  mutate(Solar=Solar*1000)
  
App_new_sub <- App_new %>% 
  filter((month(Date)==12) & (year(Date)==2022)) %>% 
  filter(day(Date)<8) %>% 
  mutate(Solar=Solar*1000)

Solar_new_sub <- Solar_new %>% 
  filter((month(Timestamp)==12) & (year(Timestamp)==2022)) %>% 
  filter(day(Timestamp)<8)  

Solar_old %>% 
  filter((month(Timestamp)==12) & (year(Timestamp)==2022)) %>% 
  filter(day(Timestamp)<8) %>% 
  ggplot(aes(x=Timestamp, y=Solar_W)) +
  #geom_point()+
  geom_line(size=1.5) +
  geom_line(data=Solar_new_sub, aes(x=Timestamp, y=Solar_W), 
            size=1.5,
            color="red") +
  geom_line(data=App_new_sub, aes(x=Date, y=Solar), color="blue")+
  geom_line(data=App_old_sub, aes(x=Date, y=Solar), color="green")




```

## Plots of the old panel history

```{r old history}

Solar_max_old <- Solar_old %>% 
  mutate(Date=date(Timestamp)) %>% 
  group_by(Date) %>% 
     summarise(Max=max(Solar_W))

Solar_max_old %>% 
  ggplot(aes(x=Date, y=Max)) + 
  geom_point(size=0.5) +
  labs(title="Original Solar Panels - Max Daily Output",
       subtitle="Some panels were removed from July 2021-October 2022",
       x="Date",
       y="Max Output in Watts")

Solar_max_old %>% 
  filter((month(Date)%in%c(8)) & (year(Date)==2021)) %>% 
  filter(day(Date)>16) %>%   
  ggplot(aes(x=Date, y=Max)) + 
  geom_point(size=0.5) +
  geom_line()+
  labs(title="Original Solar Panels - Max Daily Output",
       x="Date",
       y="Max Output in Watts")

Solar_max_old %>% 
  filter((month(Date)%in%c(9,10)) & (year(Date)==2022)) %>% 
  #filter(day(Date)>16) %>%   
  ggplot(aes(x=Date, y=Max)) + 
  geom_point(size=0.5) +
  geom_line()+
  labs(title="Original Solar Panels - Max Daily Output",
       x="Date",
       y="Max Output in Watts")
  

```

## Plots of the new panel history

```{r new history}

Solar_new %>% 
  filter(Timestamp>mdy("11-26-2022")) %>% 
  pivot_longer(!Timestamp, names_to = "Name", values_to = "Value") %>% 
  mutate(Value=Value/1000) %>% 
  ggplot(aes(x=Timestamp, y=Value, color=Name, group=Name))+
  geom_line()+
  labs(title="Energy flows - Positive Numbers Imply Electricity Flowing From",
       x="Date",
       y="Power in kW")

mult <- function(a){a/1000}

foo <- Solar_new %>% 
  filter(date(Timestamp)==mdy("12-01-2022")) %>% 
  rename(Date=Timestamp, Solar=Solar_W, Powerwall=Battery_W, Grid=Grid_W) %>% 
  mutate(across(2:4,mult)) %>% 
  mutate(Source="Web")
  
foo <- App_new %>% 
  filter(date(Date)==mdy("12-01-2022")) %>% 
  mutate(Source="App") %>% 
  select(Date, Solar, Powerwall, Grid, Source) %>% 
  rbind(., foo)

foo %>% 
  mutate(House=Grid + Solar + Powerwall) %>% 
  pivot_longer(!c(Date, Source), names_to = "Name", values_to = "Value") %>% 
  ggplot(aes(x=Date, y=Value, color=Name))+
    geom_line()+
    facet_wrap(vars(Source), nrow=2)


```

##        Calculate $ saved just for grins

```{r dollars}

#   Need to integrate data to get kWh

#   Get test day

Solar_test <- Solar_new %>% 
  filter(date(Timestamp) == mdy("12-01-2022")) %>% 
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25)


DescTools::AUC(Solar_test$Hour, Solar_test$Solar_W, method="trapezoid")
DescTools::AUC(Solar_test$Hour, Solar_test$Solar_W, method="spline")

#   Let's look at the whole enchilada

foo <- Solar_old %>% 
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25)

Total_kWatts <- 
  DescTools::AUC(foo$Hour, foo$Solar_W, method="trapezoid")

Total_dollars <- Total_kWatts*0.125

# Find max day

Solar_new %>% 
  arrange(Timestamp) %>% 
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25 + 0.125) %>% 
  mutate(Date=date(Timestamp)) %>% 
  group_by(Date) %>% 
    summarize(kWh=DescTools::AUC(Hour, Solar_W, method="spline")) %>% 
  mutate(kWh=0.001*kWh,
         Dollars=kWh*0.125) %>% 
  mutate(Cum_kWh=cumsum(kWh)) %>% 
  filter(Cum_kWh>0) %>% 
  ggplot(aes(x=Date, y=Cum_kWh)) +
  geom_line() +
  labs(title="Cumulative kWh Generated by Solar Panels",
       y="Cumulative kWh",
       x="Date")

Solar_old %>% 
  arrange(Timestamp) %>% 
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25 + 0.125) %>% 
  mutate(Date=date(Timestamp)) %>% 
  group_by(Date) %>% 
    summarize(kWh=DescTools::AUC(Hour, Solar_W, method="spline")) %>% 
  mutate(kWh=0.001*kWh,
         Dollars=kWh*0.125) %>% 
  mutate(Cum_kWh=cumsum(kWh)) %>% 
  ggplot(aes(x=Date, y=Cum_kWh)) +
  geom_line()+
  labs(title="Cumulative kWh Generated by Solar Panels",
       y="Cumulative kWh",
       x="Date")


```

##        Build daily models

Build insolation models for each week of the year using the old data, and 
capturing the max value in each 15 minute segment

```{r isolation}

foo <- Solar_old %>% 
  filter(Solar_W<6000) %>% 
  mutate(DST=dst(Timestamp)) %>% 
  mutate(Week=week(Timestamp), Time=time(Timestamp),
         Month=month(Timestamp), Day=day(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25 + 0.125) %>% 
  group_by(Hour, Week) %>%
    summarize(Hour=last(Hour), Month=last(Month), DST=last(DST),
              Day=last(Day), Solar=max(Solar_W)) %>% 
  ungroup() %>% 
  mutate(PseudoDate=ymd_hm(paste0(paste("2000", Month, Day, sep = "-"),
                           " ", as.integer(Hour), ":", ((Hour%%1)-0.125)*4*15)))

foo %>% 
  arrange(PseudoDate) %>% 
  #head(860) %>% tail(90) %>%  
  ggplot(aes(x=Hour, y=Solar, group=Week, color=DST))+
  geom_line()#+
  scale_x_date(date_breaks = "7 days",
               labels = scales::label_date_short(format = c(NA, "%B", "%d", "%H:%M")),
               expand = c(0.005,0.005))

foo <- Solar_old %>% 
  filter(Solar_W<6000) %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25 + 0.125) %>% 
  group_by(Date) %>%
    summarize(kWh=DescTools::AUC(Hour, Solar_W, method="spline")) %>% 
  mutate(Month=month(Date), Day=day(Date), 
         PseudoDate=ymd(paste0(paste("2000", Month, Day, sep = "-")))) %>% 
  group_by(PseudoDate) %>% 
    summarize(kWh=max(kWh)/1000)
  
foo %>% 
  ggplot(aes(x=PseudoDate, y=kWh)) +
  geom_line()+
  geom_smooth()+
  labs(title="Max kWh output per day, May 2019 - Dec 2022",
       x = "Time of Year") +
  scale_x_date(labels = date_format("%B"))
  
#   Now I need to build a monthly maximum insolation model

foo <- Solar_old %>% 
  filter(Solar_W<6000) %>% 
  mutate(DST=dst(Timestamp)) %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25 + 0.125,  
         Month=month(Timestamp), Day=day(Timestamp)) %>%
  mutate(Hour=if_else(DST, Hour-1, Hour)) %>% 
  group_by(Month, Hour) %>%
    summarise(Max=max(Solar_W),
              std=sd(Solar_W)) 

foo %>% 
  mutate(MonthName=ordered(month.name[Month], levels=month.name)) %>% 
  ggplot(aes(x=Hour, y=Max, group=Month)) +
  facet_wrap(vars(MonthName))+
  geom_line()



```


##  Fitting the max curves

```{r curve fitting}

#   Let's try a few spline fits

foobar <- foo %>% filter(Month==5)

Spline <- smooth.spline(foobar$Hour, foobar$Max, 
                        df=0.01, 
                       # all.knots=TRUE, 
                        #nknots=20, 
                        cv=TRUE)
Spline_df <- as_tibble(bind_cols(x=Spline$x, y=Spline$y))

foobar %>% 
  ggplot(aes(x=Hour, y=Max)) +
  geom_line(color="red") + 
  geom_line(data=Spline_df, aes(x=x, y=y))

#   Let's do them all

Sfit <- function(foobar){
  Spline <- smooth.spline(foobar$Hour, foobar$Max, 
                          df=1, 
                          cv=TRUE)
  #as_tibble(bind_cols(x=Spline$x, y=Spline$y))
  Spline$y
}

foo %>% 
  group_by(Month) %>% 
    mutate(Fit=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max)))) %>% 
  ungroup() %>% 
  mutate(MonthName=ordered(month.name[Month], levels=month.name)) %>% 
  ggplot(aes(x=Hour, y=Max, group=Month)) +
  facet_wrap(vars(MonthName))+
  geom_line(color="red") + 
  geom_line(aes(x=Hour, y=Fit))

foobar <- foo %>% 
  group_by(Month) %>% 
    mutate(Fit=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max)))) %>% 
  ungroup() %>% 
  mutate(MonthName=ordered(month.name[Month], levels=month.name)) 

saveRDS(foobar,(paste0(path, "MaxSolarByMonth.rds")))

```


##        Multiplier from old panels to new panels

Need to scale up the data to reflect the additional capacity

```{r}

foo_old <- Solar_old %>% 
  filter(Solar_W<6000) %>% 
  mutate(DST=dst(Timestamp)) %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25,  
         Month=month(Timestamp), Day=day(Timestamp)) %>%
  mutate(Hour=if_else(DST, Hour-1, Hour)) %>% 
  group_by(Month, Hour) %>%
    summarise(Max=max(Solar_W),
              std=sd(Solar_W)) %>% 
  filter(Month==12) %>% 
  mutate(Fit=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max))))  

foo_new <- Solar_new %>% 
  mutate(DST=dst(Timestamp)) %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/5*0.25,  
         Month=month(Timestamp), Day=day(Timestamp)) %>%
  filter(Month==12) %>% 
  group_by(Hour) %>%
    summarise(Max=max(Solar_W),
              std=sd(Solar_W)) %>% 
  mutate(Fit=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max))))  



foo_old %>% 
  ggplot(aes(x=Hour, y=Fit)) +
  geom_line(color="red") + 
  geom_line(data=foo_new, aes(x=Hour, y=Fit)) +
  labs(title="Spline fits to old and new data in December")

foo_diff <- left_join(foo_new, foo_old, by="Hour") %>% 
  filter(!is.na(Month)) %>% 
  filter(Fit.y>500, Fit.x>100) %>% 
  mutate(ratio=Fit.x/Fit.y)

Mean_ratio <- signif(mean((foo_diff %>% filter(ratio>1))$ratio),3)

foo_diff %>% 
  ggplot(aes(x=Hour, y=ratio)) +
  geom_line() +
  geom_hline(yintercept=Mean_ratio, color="red")+
  geom_text(aes(0,Mean_ratio,label = Mean_ratio, vjust = -1), color="red")+
  labs(title="Ratio between Old and New data for December")

```

##  wrong way to do it

Instead I need to build a transform to take old December to old "other month",
and then use that transform on new December. It is mostly a time stretch.

```{r transform}

# https://stackoverflow.com/questions/52650467/how-to-estimate-x-value-from-y-value-input-after-approxfun-in-r/52650890#52650890
RootSpline1 <- function (x, y, y0 = 0, verbose = TRUE) {
  if (is.unsorted(x)) {
     ind <- order(x)
     x <- x[ind]; y <- y[ind]
     }
  z <- y - y0
  ## which piecewise linear segment crosses zero?
  k <- which(z[-1] * z[-length(z)] <= 0)
  ## analytical root finding
  xr <- x[k] - z[k] * (x[k + 1] - x[k]) / (z[k + 1] - z[k])
  ## make a plot?
  if (verbose) {
    plot(x, y, "l"); abline(h = y0, lty = 2)
    points(xr, rep.int(y0, length(xr)))
    }
  ## return roots
  xr
}

Sfit <- function(foobar){
  Spline <- smooth.spline(foobar$Hour, foobar$Max, 
                          df=1, 
                          cv=TRUE)
  #as_tibble(bind_cols(x=Spline$x, y=Spline$y))
  Spline$y
}

foo_old <- Solar_old %>% 
  filter(Solar_W<6000) %>% 
  mutate(DST=dst(Timestamp)) %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25,  
         Month=month(Timestamp), Day=day(Timestamp)) %>%
  mutate(Hour=if_else(DST, Hour-1, Hour)) %>% 
  group_by(Month, Hour) %>%
    summarise(Max=max(Solar_W),
              std=sd(Solar_W))  

Jan_old <- foo_old %>% 
  filter(Month==1) %>% 
  mutate(Fit=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max))))  

Dec_old <- foo_old %>% 
  filter(Month==12) %>% 
  mutate(Fit=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max))))  

# foobar <- foo %>% filter(Month==12)

# Spline <- smooth.spline(foobar$Hour, foobar$Max, 
                        # df=1,
                        # cv=TRUE)
# Spline_df <- as_tibble(bind_cols(Hour=Spline$x, Max=Spline$y))

JanNew <- NULL
for (y0 in seq(250,5000, 250)){
  print(y0)
  tmp <- RootSpline1(Jan_old$Hour, Jan_old$Max, y0, verbose=FALSE)
  print(tmp)
  print(bind_cols(as_tibble(x=tmp), y=y0))
  JanNew <- bind_cols(as_tibble(x=tmp), y=y0) %>%  
    bind_rows(JanNew)
}

JanNew <- JanNew %>% 
  arrange(value) %>% 
  rename(Hour=value, Max=y)

DecNew <- NULL
for (y0 in seq(250,5000, 250)){
  print(y0)
  tmp <- RootSpline1(Dec_old$Hour, Dec_old$Max, y0, verbose=FALSE)
  print(tmp)
  print(bind_cols(as_tibble(x=tmp), y=y0))
  DecNew <- bind_cols(as_tibble(x=tmp), y=y0) %>%  
    bind_rows(DecNew)
}

DecNew <- DecNew %>% 
  arrange(value) %>% 
  rename(Hour=value, Max=y)

DecNew %>% 
  ggplot(aes(x=Hour, y=Max)) +
  geom_line(color="red") + 
  geom_point(color="red") + 
  geom_point(data=JanNew, aes(x=Hour, y=Max))+
  geom_line(data=JanNew, aes(x=Hour, y=Max)) +
  scale_x_continuous(breaks=seq(7.5, 18, 0.5))

Diffs <- full_join(DecNew %>% rename(DecHour=Hour), JanNew, by="Max") %>% 
  mutate(Diff=DecHour-Hour) %>% 
  arrange(DecHour) %>% 
  unique() %>% 
  group_by(DecHour) %>% 
    summarise(Diff=min(abs(Diff), na.rm=TRUE), Max=last(Max))

Spline <- smooth.spline(Diffs$DecHour, Diffs$Diff, 
                        df=5,
                        cv=TRUE)
Spline_df <- as_tibble(bind_cols(DecHour=Spline$x, Diff_sm=Spline$y))

Diffs %>% 
  ggplot(aes(x=DecHour, y=Diff))+
  geom_point() +
  geom_line()+
  geom_line(data=Spline_df, aes(x=DecHour, y=Diff_sm)) +
  scale_x_continuous(breaks=seq(7.5, 18, 0.5))

```











