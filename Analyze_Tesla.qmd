---
title: "Analyze Tesla"
author: "Alan Jackson"
format: html
editor: visual
---

## Analyze Tesla data

The tesla data comes from several sources, so we will compare and contrast.

We have the original solar panels, which are on one account, the new solar panels and batteries, on a different account, and for both we have data downloaded from the app as well as data downloaded with python code off the web.

```{r init}
#| echo: false

library(tidyverse)
library(lubridate)
library(scales)

path <- "/home/ajackson/Dropbox/Rprojects/Tulane_Solar/Data/"

Solar_old <- readRDS(paste0(path, "Solar_old.rds"))
Solar_new <- readRDS(paste0(path, "Solar_new.rds"))
App_old <- readRDS(paste0(path, "App_old.rds"))
App_new <- readRDS(paste0(path, "App_new.rds"))

```

## Make some plots

```{r first plots}

#   Solar_old June 2019, December 2022

Solar_old %>% 
  filter((month(Timestamp)==6) & (year(Timestamp)==2019)) %>% 
  filter(day(Timestamp)<8) %>% 
  ggplot(aes(x=Timestamp, y=Solar_W)) +
  #geom_point()+
  geom_line()

Solar_old %>% 
  filter((month(Timestamp)==12) & (year(Timestamp)==2022)) %>% 
  filter(day(Timestamp)<8) %>% 
  ggplot(aes(x=Timestamp, y=Solar_W)) +
  #geom_point()+
  geom_line()

App_old_sub <- App_old %>%
  filter((month(Date)==12) & (year(Date)==2022)) %>%
  filter(day(Date)<8) %>%
  mutate(Solar=Solar*1000)
  
App_new_sub <- App_new %>% 
  filter((month(Date)==12) & (year(Date)==2022)) %>% 
  filter(day(Date)<8) %>% 
  mutate(Solar=Solar*1000)

Solar_new_sub <- Solar_new %>% 
  filter((month(Timestamp)==12) & (year(Timestamp)==2022)) %>% 
  filter(day(Timestamp)<8)  

Solar_old %>% 
  filter((month(Timestamp)==12) & (year(Timestamp)==2022)) %>% 
  filter(day(Timestamp)<8) %>% 
  ggplot(aes(x=Timestamp, y=Solar_W)) +
  #geom_point()+
  geom_line(size=1.5) +
  geom_line(data=Solar_new_sub, aes(x=Timestamp, y=Solar_W), 
            size=1.5,
            color="red") +
  geom_line(data=App_new_sub, aes(x=Date, y=Solar), color="blue")+
  geom_line(data=App_old_sub, aes(x=Date, y=Solar), color="green")




```

## Plots of the old panel history

```{r old history}

Solar_max_old <- Solar_old %>% 
  mutate(Date=date(Timestamp)) %>% 
  group_by(Date) %>% 
     summarise(Max=max(Solar_W))

Solar_max_old %>% 
  ggplot(aes(x=Date, y=Max)) + 
  geom_point(size=0.5) +
  labs(title="Original Solar Panels - Max Daily Output",
       subtitle="Some panels were removed from July 2021-October 2022",
       x="Date",
       y="Max Output in Watts")

Solar_max_old %>% 
  filter((month(Date)%in%c(8)) & (year(Date)==2021)) %>% 
  filter(day(Date)>16) %>%   
  ggplot(aes(x=Date, y=Max)) + 
  geom_point(size=0.5) +
  geom_line()+
  labs(title="Original Solar Panels - Max Daily Output",
       x="Date",
       y="Max Output in Watts")

Solar_max_old %>% 
  filter((month(Date)%in%c(9,10)) & (year(Date)==2022)) %>% 
  #filter(day(Date)>16) %>%   
  ggplot(aes(x=Date, y=Max)) + 
  geom_point(size=0.5) +
  geom_line()+
  labs(title="Original Solar Panels - Max Daily Output",
       x="Date",
       y="Max Output in Watts")
  

```

## Plots of the new panel history

```{r new history}

Solar_new %>% 
  filter(Timestamp>mdy("11-26-2022")) %>% 
  pivot_longer(!Timestamp, names_to = "Name", values_to = "Value") %>% 
  mutate(Value=Value/1000) %>% 
  ggplot(aes(x=Timestamp, y=Value, color=Name, group=Name))+
  geom_line()+
  labs(title="Energy flows - Positive Numbers Imply Electricity Flowing From",
       x="Date",
       y="Power in kW")

mult <- function(a){a/1000}

foo <- Solar_new %>% 
  filter(date(Timestamp)==mdy("12-01-2022")) %>% 
  rename(Date=Timestamp, Solar=Solar_W, Powerwall=Battery_W, Grid=Grid_W) %>% 
  mutate(across(2:4,mult)) %>% 
  mutate(Source="Web")
  
foo <- App_new %>% 
  filter(date(Date)==mdy("12-01-2022")) %>% 
  mutate(Source="App") %>% 
  select(Date, Solar, Powerwall, Grid, Source) %>% 
  rbind(., foo)

foo %>% 
  mutate(House=Grid + Solar + Powerwall) %>% 
  pivot_longer(!c(Date, Source), names_to = "Name", values_to = "Value") %>% 
  ggplot(aes(x=Date, y=Value, color=Name))+
    geom_line()+
    facet_wrap(vars(Source), nrow=2)


```

## Calculate \$ saved just for grins

```{r dollars}

#   Need to integrate data to get kWh

#   Get test day

Solar_test <- Solar_new %>% 
  filter(date(Timestamp) == mdy("12-01-2022")) %>% 
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25)


DescTools::AUC(Solar_test$Hour, Solar_test$Solar_W, method="trapezoid")
DescTools::AUC(Solar_test$Hour, Solar_test$Solar_W, method="spline")

#   Let's look at the whole enchilada

foo <- Solar_old %>% 
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25)

Total_kWatts <- 
  DescTools::AUC(foo$Hour, foo$Solar_W, method="trapezoid")

Total_dollars <- Total_kWatts*0.125

# Find max day

Solar_new %>% 
  arrange(Timestamp) %>% 
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25 + 0.125) %>% 
  mutate(Date=date(Timestamp)) %>% 
  group_by(Date) %>% 
    summarize(kWh=DescTools::AUC(Hour, Solar_W, method="spline")) %>% 
  mutate(kWh=0.001*kWh,
         Dollars=kWh*0.125) %>% 
  mutate(Cum_kWh=cumsum(kWh)) %>% 
  filter(Cum_kWh>0) %>% 
  ggplot(aes(x=Date, y=Cum_kWh)) +
  geom_line() +
  labs(title="Cumulative kWh Generated by Solar Panels",
       y="Cumulative kWh",
       x="Date")

Solar_old %>% 
  arrange(Timestamp) %>% 
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25 + 0.125) %>% 
  mutate(Date=date(Timestamp)) %>% 
  group_by(Date) %>% 
    summarize(kWh=DescTools::AUC(Hour, Solar_W, method="spline")) %>% 
  mutate(kWh=0.001*kWh,
         Dollars=kWh*0.125) %>% 
  mutate(Cum_kWh=cumsum(kWh)) %>% 
  ggplot(aes(x=Date, y=Cum_kWh)) +
  geom_line()+
  labs(title="Cumulative kWh Generated by Solar Panels",
       y="Cumulative kWh",
       x="Date")


```

## Build daily models

Build insolation models for each week of the year using the old data, and capturing the max value in each 15 minute segment

```{r isolation}

foo <- Solar_old %>% 
  filter(Solar_W<6000) %>% 
  mutate(DST=dst(Timestamp)) %>% 
  mutate(Week=week(Timestamp), Time=time(Timestamp),
         Month=month(Timestamp), Day=day(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25 + 0.125) %>% 
  group_by(Hour, Week) %>%
    summarize(Hour=last(Hour), Month=last(Month), DST=last(DST),
    #summarize(Hour=last(Hour), Month=last(Month),
              Day=last(Day), Solar=max(Solar_W)) %>% 
  ungroup() %>% 
  mutate(PseudoDate=ymd_hm(paste0(paste("2000", Month, Day, sep = "-"),
                           " ", as.integer(Hour), ":", ((Hour%%1)-0.125)*4*15)))

foo %>% 
  arrange(PseudoDate) %>% 
  #head(860) %>% tail(90) %>%  
  ggplot(aes(x=Hour, y=Solar, group=Week, color=DST))+
  geom_line()#+
  scale_x_date(date_breaks = "7 days",
               labels = scales::label_date_short(format = c(NA, "%B", "%d", "%H:%M")),
               expand = c(0.005,0.005))

foo <- Solar_old %>% 
  filter(Solar_W<6000) %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25 + 0.125) %>% 
  group_by(Date) %>%
    summarize(kWh=DescTools::AUC(Hour, Solar_W, method="spline")) %>% 
  mutate(Month=month(Date), Day=day(Date), 
         PseudoDate=ymd(paste0(paste("2000", Month, Day, sep = "-")))) %>% 
  group_by(PseudoDate) %>% 
    summarize(kWh=max(kWh)/1000)
  
foo %>% 
  ggplot(aes(x=PseudoDate, y=kWh)) +
  geom_line()+
  geom_smooth()+
  labs(title="Max kWh output per day, May 2019 - Dec 2022",
       x = "Time of Year") +
  scale_x_date(labels = date_format("%B"))
  
#   Now I need to build a monthly maximum insolation model

foo <- Solar_old %>% 
  filter(Solar_W<6000) %>% 
  mutate(DST=dst(Timestamp)) %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25 + 0.125,  
         Month=month(Timestamp), Day=day(Timestamp)) %>%
  mutate(Hour=if_else(DST, Hour-1, Hour)) %>% 
  group_by(Month, Hour) %>%
    summarise(Max=max(Solar_W),
              std=sd(Solar_W)) 

foo %>% 
  mutate(MonthName=ordered(month.name[Month], levels=month.name)) %>% 
  ggplot(aes(x=Hour, y=Max, group=Month)) +
  facet_wrap(vars(MonthName))+
  geom_line()



```

## Fitting the max curves

```{r curve fitting}

#   Let's try a few spline fits

foobar <- foo %>% filter(Month==5)

Spline <- smooth.spline(foobar$Hour, foobar$Max, 
                        df=0.01, 
                       # all.knots=TRUE, 
                        #nknots=20, 
                        cv=TRUE)
Spline_df <- as_tibble(bind_cols(x=Spline$x, y=Spline$y))

foobar %>% 
  ggplot(aes(x=Hour, y=Max)) +
  geom_line(color="red") + 
  geom_line(data=Spline_df, aes(x=x, y=y))

#   Let's do them all

Sfit <- function(foobar){
  Spline <- smooth.spline(foobar$Hour, foobar$Max, 
                          #df=1, 
                          cv=TRUE)
  #as_tibble(bind_cols(x=Spline$x, y=Spline$y))
  Spline$y
}

foo %>% 
  group_by(Month) %>% 
    mutate(Fit=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max)))) %>% 
  ungroup() %>% 
  mutate(MonthName=ordered(month.name[Month], levels=month.name)) %>% 
  ggplot(aes(x=Hour, y=Max, group=Month)) +
  facet_wrap(vars(MonthName))+
  geom_line(color="red") + 
  geom_line(aes(x=Hour, y=Fit))

foobar <- foo %>% 
  group_by(Month) %>% 
    mutate(Fit=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max)))) %>% 
  ungroup() %>% 
  mutate(MonthName=ordered(month.name[Month], levels=month.name)) 

saveRDS(foobar,(paste0(path, "MaxSolarByMonth.rds")))

Old_data_sm <- foobar

```

## Multiplier from old panels to new panels

Need to scale up the data to reflect the additional capacity

```{r}

foo_old <- Solar_old %>% 
  filter(Solar_W<6000) %>% 
  mutate(DST=dst(Timestamp)) %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25,  
         Month=month(Timestamp), Day=day(Timestamp)) %>%
  # mutate(Hour=if_else(DST, Hour-1, Hour)) %>% 
  group_by(Month, Hour) %>%
    summarise(Max=max(Solar_W),
              std=sd(Solar_W)) %>% 
  filter(Month==12) %>% 
  mutate(Fit=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max))))  

foo_new <- Solar_new %>% 
  mutate(DST=dst(Timestamp)) %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/5/12,  
         Month=month(Timestamp), Day=day(Timestamp)) %>%
  filter(Month==12) %>% 
  group_by(Hour) %>%
    summarise(Max=max(Solar_W),
              std=sd(Solar_W)) %>% 
  mutate(Fit=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max))))  



foo_old %>% 
  ggplot(aes(x=Hour, y=Fit)) +
  geom_line(color="red") + 
  geom_line(data=foo_new, aes(x=Hour, y=Fit)) +
  labs(title="Spline fits to old and new data in December")

foo_diff <- left_join(foo_new, foo_old, by="Hour") %>% 
  filter(!is.na(Month)) %>% 
  filter(Fit.y>500, Fit.x>100) %>% 
  mutate(ratio=Fit.x/Fit.y)

Mean_ratio <- signif(mean((foo_diff %>% filter(ratio>1))$ratio),3)

foo_diff %>% 
  ggplot(aes(x=Hour, y=ratio)) +
  geom_line() +
  geom_hline(yintercept=Mean_ratio, color="red")+
  geom_text(aes(0,Mean_ratio,label = Mean_ratio, vjust = -1), color="red")+
  labs(title="Ratio between Old and New data for December")

```

```{r functions}

#   https://rdrr.io/github/sethmcg/climod/src/R/pdf2cdf.R
pdf2cdf <- function(p, x=NULL, normalize=TRUE, expand=FALSE){
    if(is.null(x)) {
        if(is.atomic(p)){
            y <- p
            x <- seq(length(y))
        } else {
            stopifnot(exists("x", where=p) && exists("y", where=p))
            y <- p$y
            x <- p$x
        }
    } else {
        stopifnot(is.atomic(p) && is.atomic(x))
        y <- p
    }
    
    stopifnot(length(x)==length(y))
    stopifnot(length(x) > 2)
    stopifnot(all(is.finite(x)))
    stopifnot(all(is.finite(y)))
    stopifnot(all(diff(x) > 0))

    if(any(y < 0)){
        y[y < 0] <- 0
    }
    
    ## trapezoids: N = no., L = left height, R = right height, W = width
    N <- length(y) + 1
    L <- c(0,y)
    R <- c(y,0)
    W <- diff(x)
    W <- c(W[1], W, W[N-2])
    area <- W * (L + R) / 2
    cdf <- cumsum(area)

    if(normalize){
        cdf <- cdf / cdf[N]
    }
    if(expand){
        return(list(x=c(x[1]-W[1],x,x[N-1]+W[N]), y=c(0,cdf)))
    } else {
        return(list(x=x, y=cdf[-N]))
    }
}

make_icdf <- function(foo, offset=0){
  #   density 
  denf = density(foo$PctMax, adjust=1, n=4096)
  #   Convert to CDF
  cdf <- pdf2cdf(denf)
  #   Build data frame
  #dens = data.frame(x=denf$x, y=denf$y)
  #   Build data frame
  cdf <- data.frame(x=denf$x, y=cdf$y)
  #   Spline fit function
  q <- splinefun(cdf$y, cdf$x, method="monoH.FC")
  #   Output points
  probs <- seq(0,1,0.001)
  #   Invert CDF
  icdf <- as_tibble(cbind(PctMax=q(probs)-offset, Prob=probs))
  return(icdf)
}

##################################  RootSpline1
# https://stackoverflow.com/questions/52650467/how-to-estimate-x-value-from-y-value-input-after-approxfun-in-r/52650890#52650890
RootSpline1 <- function (x, y, y0 = 0, verbose = TRUE) {
  if (is.unsorted(x)) {
     ind <- order(x)
     x <- x[ind]; y <- y[ind]
     }
  z <- y - y0
  ## which piecewise linear segment crosses zero?
  k <- which(z[-1] * z[-length(z)] <= 0)
  ## analytical root finding
  xr <- x[k] - z[k] * (x[k + 1] - x[k]) / (z[k + 1] - z[k])
  ## make a plot?
  if (verbose) {
    plot(x, y, "l"); abline(h = y0, lty = 2)
    points(xr, rep.int(y0, length(xr)))
    }
  ## return roots
  xr
}
##################################  RootSpline1

##################################  Sfit
Sfit <- function(foobar){
  Spline <- smooth.spline(foobar$Hour, foobar$Max, 
                          cv=TRUE)
  Spline$y
}
##################################  Sfit
```

## wrong way to do it

Instead I need to build a transform to take old December to old "other month", and then use that transform on new December. It is mostly a time stretch.

```{r transform}

Old_clean <- Solar_old %>% #    Clean up old data and calc Max values by time
  filter(Solar_W<6000) %>% 
  mutate(DST=dst(Timestamp)) %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25,  
         Month=month(Timestamp), Day=day(Timestamp)) %>%
  # mutate(Hour=if_else(DST, Hour-1, Hour)) %>% 
  group_by(Month, Hour) %>%
    summarise(Max=max(Solar_W),
              std=sd(Solar_W))  

# Old_clean_sm <- Old_clean %>% 
#   group_by(Month) %>% 
#     mutate(Fit=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max)))) %>% 
#   ungroup() %>% 
#   mutate(MonthName=ordered(month.name[Month], levels=month.name)) 

Jan_old <- Old_clean %>% 
  filter(Month==1) %>% 
  mutate(Fit=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max)))) %>% 
  filter(Max>0 |
           (Max+lag(Max))>0 |
           (Max+lead(Max)>0))

Dec_old <- Old_clean %>% 
  filter(Month==12) %>% 
  mutate(Fit=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max)))) %>% 
  filter(Max>0 |
           (Max+lag(Max))>0 |
           (Max+lead(Max)>0))

Jan_root <- NULL
for (y0 in seq(0,5000, 250)){
  #print(y0)
  tmp <- RootSpline1(Jan_old$Hour, Jan_old$Max, y0, verbose=FALSE)
  #print(tmp)
  #print(bind_cols(as_tibble(x=tmp), y=y0))
  Jan_root <- bind_cols(as_tibble(x=tmp), y=y0) %>%  
    bind_rows(Jan_root)
}

Jan_root <- Jan_root %>% 
  arrange(value) %>% 
  rename(Hour=value, Max=y)

Dec_root <- NULL
for (y0 in seq(0,5000, 250)){
  #print(y0)
  tmp <- RootSpline1(Dec_old$Hour, Dec_old$Max, y0, verbose=FALSE)
  #print(tmp)
  #print(bind_cols(as_tibble(x=tmp), y=y0))
  Dec_root <- bind_cols(as_tibble(x=tmp), y=y0) %>%  
    bind_rows(Dec_root)
}

Dec_root <- Dec_root %>% 
  arrange(value) %>% 
  rename(Hour=value, Max=y)

Dec_root %>% 
  ggplot(aes(x=Hour, y=Max)) +
  geom_line(color="red") + 
  geom_point(color="red") + 
  geom_point(data=Jan_root, aes(x=Hour, y=Max))+
  geom_line(data=Jan_root, aes(x=Hour, y=Max)) +
  scale_x_continuous(breaks=seq(7.5, 18, 0.5))

########    Calculate differences

Diffs <- full_join(Dec_root %>% rename(DecHour=Hour), Jan_root, by="Max") %>% 
  mutate(Diff=DecHour-Hour) %>% 
  arrange(DecHour) %>% 
  filter(!is.na(Diff)) %>% 
  unique() %>% 
  group_by(DecHour) %>% 
    summarise(Diff=min(abs(Diff), na.rm=TRUE), Max=last(Max))

#   Fit smooth spline to differences
Diff_sm <- smooth.spline(Diffs$DecHour, Diffs$Diff, 
                        df=5,
                        cv=TRUE)
Diff_sm_df <- as_tibble(bind_cols(DecHour=c(first(Diff_sm$x)-0.08, 
                                         Diff_sm$x,
                                         last(Diff_sm$x+0.08)), 
                                 Diff_sm=c(first(Diff_sm$y), 
                                           Diff_sm$y, 
                                           last(Diff_sm$y))))

Diffs %>% 
  ggplot(aes(x=DecHour, y=Diff))+
  geom_point() +
  geom_line()+
  geom_line(data=Diff_sm_df, aes(x=DecHour, y=Diff_sm), color="red", linetype="dashed") +
  scale_x_continuous(breaks=seq(7.5, 18, 0.5))

#   Now let's apply the transform to the new data

  #  First interpolate smoothed diff to time points from new December data
Dec_new <- Solar_new %>% 
  mutate(DST=dst(Timestamp)) %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + (minute(Timestamp)/5)/12,  
         Month=month(Timestamp), Day=day(Timestamp)) %>%
  filter(Month==12) %>% 
  group_by(Hour) %>%
    summarise(Max=max(Solar_W),
              std=sd(Solar_W)) %>% 
  mutate(Fit=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max))))

Dec_new %>% 
  mutate(Fit=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max)))) %>%  
  ggplot(aes(x=Hour, y=Max))+
  geom_line()+
  geom_point(aes(y=Fit))

Diff_sm_interp <- approx(Diff_sm_df$DecHour, Diff_sm_df$Diff_sm, xout=Dec_new$Hour)

Diff_sm_interp_df <- as_tibble(bind_cols(DecHour=Diff_sm_interp$x, 
                                         Diff_sm=Diff_sm_interp$y)) %>% 
  filter(!is.na(Diff_sm))

Diffs %>% 
  ggplot(aes(x=DecHour, y=Diff))+
  geom_point() +
  geom_line()+
  # geom_line(data=Spline_df, aes(x=DecHour, y=Diff_sm), color="red", linetype="dashed") +
  # geom_point(data=foo2_df, aes(x=DecHour, y=Diff_sm), color="blue", linetype="dashed") +
  geom_line(data=Diff_sm_df, aes(x=DecHour, y=Diff_sm), color="red", linetype="dashed") +
  geom_point(data=Diff_sm_interp_df, aes(x=DecHour, y=Diff_sm), color="blue", linetype="dashed") +
  scale_x_continuous(breaks=seq(7.5, 18, 0.5))

  # Now apply the diff to the 2022 December data

Jan_xform <- left_join(Dec_new, Diff_sm_interp_df, by=c("Hour"="DecHour")) %>% 
  mutate(Hour=Hour+Diff_sm)

Jan_xform %>% 
  ggplot(aes(x=Hour, y=Fit)) +
  geom_line(data=Dec_new, aes(x=Hour, y=Fit)) +
  geom_line(color="red") + 
  labs(title="New December data and transformed January data")


```

## Now do all the months

```{r all xforms}

Dec_new <- Solar_new %>% 
  mutate(DST=dst(Timestamp)) %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/5/12,  
         Month=month(Timestamp), Day=day(Timestamp)) %>%
  filter(Month==12) %>% 
  group_by(Hour) %>%
    summarise(Max=max(Solar_W),
              std=sd(Solar_W)) %>% 
  mutate(Fit=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max))))  

New_xform <-  Dec_new

for (mon in 1:11) {

  Target_old <- Old_clean %>% 
    filter(Month==mon) %>% 
    mutate(Fit=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max)))) %>% 
    filter(Max>0 |
             (Max+lag(Max))>0 |
             (Max+lead(Max)>0))
  Target_root <- NULL
  for (y0 in seq(0,5000, 250)){
    tmp <- RootSpline1(Target_old$Hour, Target_old$Max, y0, verbose=FALSE)
    Target_root <- bind_cols(as_tibble(x=tmp), y=y0) %>%  
      bind_rows(Target_root)
  }
  
  Target_root <- Target_root %>% 
    arrange(value) %>% 
    rename(Hour=value, Max=y)
  
  #   Plot December and target month
  
  p <- Dec_root %>% 
    ggplot(aes(x=Hour, y=Max)) +
    geom_line(color="red") + 
    geom_point(color="red") + 
    geom_point(data=Target_root, aes(x=Hour, y=Max))+
    geom_line(data=Target_root, aes(x=Hour, y=Max)) +
    scale_x_continuous(breaks=seq(5.5, 19, 0.5))
  
  print(p)
  
########    Calculate differences

  Diffs <- full_join(Dec_root %>% rename(DecHour=Hour), Target_root, by="Max") %>% 
    mutate(Diff=DecHour-Hour) %>% 
    arrange(DecHour) %>% 
    filter(!is.na(Diff)) %>% 
    unique() %>% 
    group_by(DecHour) %>% 
      summarise(Diff=min(abs(Diff), na.rm=TRUE), Max=last(Max))
  
  #   Fit smooth spline to differences
  Diff_sm <- smooth.spline(Diffs$DecHour, Diffs$Diff, 
                          df=5,
                          cv=TRUE)
  Diff_sm_df <- as_tibble(bind_cols(DecHour=c(first(Diff_sm$x)-0.08, 
                                           Diff_sm$x,
                                           last(Diff_sm$x+0.08)), 
                                   Diff_sm=c(first(Diff_sm$y), 
                                             Diff_sm$y, 
                                             last(Diff_sm$y))))
  
 p <-  Diffs %>% 
    ggplot(aes(x=DecHour, y=Diff))+
    geom_point() +
    geom_line()+
    geom_line(data=Diff_sm_df, aes(x=DecHour, y=Diff_sm), color="red", linetype="dashed") +
    scale_x_continuous(breaks=seq(7.5, 18, 0.5))  
 
 #print(p)

  #   Now let's apply the transform to the new data
  
    #  First interpolate smoothed diff to time points from new December data

  Diff_sm_interp <- approx(Diff_sm_df$DecHour, Diff_sm_df$Diff_sm, xout=Dec_new$Hour)
  
  Diff_sm_interp_df <- as_tibble(bind_cols(DecHour=Diff_sm_interp$x, 
                                           Diff_sm=Diff_sm_interp$y)) %>% 
    filter(!is.na(Diff_sm))
  
p <-  Diffs %>% 
    ggplot(aes(x=DecHour, y=Diff))+
    geom_point() +
    geom_line()+
    geom_line(data=Diff_sm_df, aes(x=DecHour, y=Diff_sm), color="red", linetype="dashed") +
    geom_point(data=Diff_sm_interp_df, aes(x=DecHour, y=Diff_sm), color="blue", linetype="dashed") +
    scale_x_continuous(breaks=seq(7.5, 18, 0.5))
   
#print(p)

  # Now apply the diff to the 2022 December data

  Xform <- left_join(Dec_new, Diff_sm_interp_df, by=c("Hour"="DecHour")) %>% 
    mutate(Hour=Hour+Diff_sm)
  
  p <- Xform %>% 
    ggplot(aes(x=Hour, y=Fit)) +
    geom_line(data=Dec_new, aes(x=Hour, y=Fit)) +
    geom_line(color="red") + 
    labs(title=paste("New December data and transformed", month.name[mon] , "data"))
  
  print(p)
  
  New_xform <- bind_rows(New_xform, Xform)

}

saveRDS(New_xform,(paste0(path, "MaxSolarByMonth.rds")))

```

## Let's look at the mean and minimum values

```{r mean}

foo <- Solar_old %>% 
  filter(Solar_W<6000) %>% 
  mutate(DST=dst(Timestamp)) %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25 + 0.125,  
         Month=month(Timestamp), Day=day(Timestamp)) %>%
  # mutate(Hour=if_else(DST, Hour-1, Hour)) %>% 
  group_by(Month, Hour) %>%
    summarise(Max=max(Solar_W),
              Mean=mean(Solar_W),
              Min=min(Solar_W),
              std=sd(Solar_W)) 

Old_stats <- foo %>% 
  filter(Max>0 |
           (Max+lag(Max))>0 |
           (Max+lead(Max)>0)) %>% 
  group_by(Month) %>% 
    mutate(Fit_mean=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Mean)))) %>% 
    mutate(Fit_min=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Min)))) %>% 
    mutate(Fit_max=Sfit(as_tibble(bind_cols(Hour=Hour, Max=Max)))) %>% 
  ungroup() %>% 
  mutate(MonthName=ordered(month.name[Month], levels=month.name)) 

Old_stats %>% 
  ggplot(aes(x=Hour, y=Max, group=Month)) +
  facet_wrap(vars(MonthName))+
  geom_line(color="red") + 
  geom_line(aes(x=Hour, y=Fit_max))+
  geom_line(aes(x=Hour, y=Fit_mean), color="blue")+
  geom_line(aes(x=Hour, y=Fit_min), color="orange")+
  geom_line(aes(x=Hour, y=Fit_mean+std), color="blue",linetype="dashed")+
  geom_line(aes(x=Hour, y=Fit_mean-std), color="blue", linetype="dashed")

Solar_old %>% 
  filter(Solar_W<6000) %>% 
  mutate(DST=dst(Timestamp)) %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25 + 0.125,  
         Month=month(Timestamp), Day=day(Timestamp)) %>%
  # mutate(Hour=if_else(DST, Hour-1, Hour)) %>% 
  mutate(MonthName=ordered(month.name[Month], levels=month.name)) %>% 
  filter(Hour>8 & Hour < 17) %>% 
  ggplot(aes(x=Solar_W, group=Month)) +
  facet_wrap(vars(MonthName))+
  geom_histogram(binwidth=200)
  
Solar_old %>% 
  filter(Solar_W<6000) %>% 
  mutate(DST=dst(Timestamp)) %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25 + 0.125,  
         Month=month(Timestamp), Day=day(Timestamp)) %>%
  # mutate(Hour=if_else(DST, Hour-1, Hour)) %>% 
  filter(Hour>8 & Hour < 17) %>% 
  left_join(., Old_stats, by=c("Hour", "Month")) %>% 
  mutate(Ratio=Solar_W/Fit_max) %>% 
  ggplot(aes(x=Ratio, group=Month)) +
  facet_wrap(vars(MonthName))+
  geom_histogram()

```

# Let's look at how to build insolation probability curves

Want to have curves by Hour by Month

```{r insolation}
#! warning: false
foo <- Solar_old %>% 
  filter(Solar_W<6000) %>% 
  mutate(DST=dst(Timestamp)) %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25 + 0.125,  
         Month=month(Timestamp), Day=day(Timestamp)) %>%
  # mutate(Hour=if_else(DST, Hour-1, Hour)) %>% 
  group_by(Month, Hour) %>%
    mutate(Max=max(Solar_W),
           Mean=mean(Solar_W),
           Min=min(Solar_W),
           PctMax=Solar_W/Max,
           std=sd(Solar_W)) %>% 
  ungroup() %>% 
  filter(Max>0 |
           (Max+lag(Max))>0 |
           (Max+lead(Max)>0)) 

foo %>% 
  #filter(Month==12) %>% 
  mutate(MonthName=ordered(month.name[Month], levels=month.name)) %>% 
  mutate(Hour=as.factor(round(Hour))) %>% 
    ggplot(aes(x=Solar_W, y=Hour, fill=stat(x)))+
    ggridges::geom_density_ridges_gradient(scale=2.5, panel_scaling = FALSE)+
    scale_fill_viridis_c(name = "kWh", option = "C")+
    facet_wrap(vars(MonthName))+
    labs(title="kWh vs. Hour of Day",
       subtitle="2019 through 2022",
       x="kWh",
       y="Hour of Day") 

foo %>% 
  #filter(Month==12) %>% 
  mutate(MonthName=ordered(month.name[Month], levels=month.name)) %>% 
  mutate(Hour=as.factor(round(Hour))) %>% 
    ggplot(aes(x=PctMax, y=Hour, fill=stat(x)))+
    ggridges::geom_density_ridges_gradient(scale=2.5, panel_scaling = FALSE)+
    scale_fill_viridis_c(name = "Percent Max", option = "C")+
    facet_wrap(vars(MonthName))+
    labs(title="Percent Max vs. Hour of Day",
       subtitle="2019 through 2022",
       x="Pct Max",
       y="Hour of Day") 
```

## Build probability distributions of PctMax vs Hour and Month

```{r PctMax}

#   Try out January

foobar <- foo %>% 
  mutate(Hour=round(Hour)) %>% 
  filter(Month==1) %>% 
  filter(Hour==14)

icdf <- make_icdf(foobar, offset=0)

icdf %>% 
  ggplot(aes(x=PctMax, y=Prob)) +
  geom_point()+
  geom_line()

foobar <- foo %>% 
  mutate(Hour=round(Hour)) %>% 
  filter(Month==5) %>% 
  filter(Hour==14)

icdf <- make_icdf(foobar, offset=0) %>% 
  rowwise() %>% 
  mutate(PctMax=max(0, PctMax)) %>%  
  mutate(PctMax=min(1, PctMax)) %>% 
  ungroup()

icdf %>% 
  ggplot(aes(x=PctMax, y=Prob)) +
  geom_point()+
  geom_line()

##########   do them all

foo2 <- foo %>% 
  mutate(Hour=round(Hour)) %>% 
  filter(Hour>6) %>% 
  filter(Hour<21) %>% 
  filter(!is.nan(PctMax))

Start_Hour <- min(foo2$Hour)
End_Hour <- max(foo2$Hour)

output <- NULL
for (month in 1:12){
  for (hour in Start_Hour:End_Hour){
    print(paste(month, hour))
    foobar <- foo2 %>% filter(Hour==hour) %>% filter(Month==month)
    if (nrow(foobar)<3) {next}
    icdf <- make_icdf(foobar, offset=0) %>% 
      rowwise() %>% 
      mutate(PctMax=max(0, PctMax)) %>%  
      mutate(PctMax=min(1, PctMax)) %>% 
      ungroup()
    #icdf <- make_icdf(foobar, offset=0)
    icdf <- icdf %>% mutate(Month=month, Hour=hour)
    output <- rbind(output, icdf)
  }
}

saveRDS(output, paste0(path, "ICDF_Month_Hour_PctMax.rds"))


```
