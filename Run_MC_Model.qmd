---
title: "Run Monte Carlo Model"
author: "Alan Jackson"
format: html
editor: visual
---

## This is a Monte Carlo model

Initialize what the model will need

```{r initialize}
#| echo: false

library(tidyverse)
library(lubridate)

path <- "/home/ajackson/Dropbox/Rprojects/Tulane_Solar/Data/"

ICDF_Temperature <- read_rds(paste0(path, "ICDF_TempBucket_per_Month_Hour.rds"))
ICDF_Usage <- read_rds(paste0(path, "ICDF_HomePower_Vac_Temp_ToD.rds")) %>% 
  rowwise() %>% 
  mutate(kWh=max(0.05, kWh)) %>% 
  ungroup()
Max_solar <- read_rds(paste0(path, "MaxSolarByMonth_Hour.rds"))
Pct_Max_solar <- read_rds(paste0(path, "ICDF_Month_Hour_PctMax.rds"))

ICDF_TempLong <- ICDF_Temperature %>% 
  select(-Total) %>% 
  pivot_longer(cols=c("Cold", "Cool", "Warm", "Hot", "Hell"), 
               names_to="Temperature", 
               values_to="CDF")

```

##    Functions

Home - for Usage

Weather - for Temperature

Solar - for Solar output

Ercot - for price



## Home Usage Function

```{r Home}
#   Temp = Temperature bucket (Cold, Cool, Warm, Hot, Hell)
#   Hour = integer hour of day (0-23)
#   Occupied = "Occupied" or "Vacation" 

##############   Home
Home <- function(Temp, Hour, Occupied) {
  ToD <- case_when(
    Hour <= 6 | Hour >= 19 ~ "Night",
    between(Hour, 16, 19) ~ "Eve",
    TRUE ~ "Day"
  )
  
  pick <- round(runif(1), digits=3)
  
  Answer <- ICDF_Usage %>% 
    filter(Temp==!!Temp) %>% 
    filter(ToD==!!ToD) %>% 
    filter(Prob==pick) %>%  
    filter(Status==Occupied) 
  
  if (length(Answer$kWh)>0) {return(Answer$kWh)}
  else {return(0.05)}
}

############   Weather
Weather <- function(month, hour){
  Seed <- runif(1)
  i <- (month-1)*120+1 + 5*hour 
  Answer <- ICDF_TempLong[i:(i+4),] %>% 
    # filter(Month==month , HourOfDay==hour) %>%  
    filter(Seed<CDF)
  return(Answer$Temperature[1]) 
}
#############


#############  Solar
Solar <-  function(month, hour) {
  Max <- Max_solar[(month-1)*24+1 + hour, 3]
   
  pick <- round(runif(1), digits=3)
  
  Answer <- Pct_Max_solar %>% 
    filter(Month==month) %>% 
    filter(Hour==hour) %>% 
    filter(Prob==pick)  
  
  if (length(Answer$PctMax)>0) {return(Max[[1]]*Answer$PctMax[[1]])}
  else {return(0.00)}
}
#############

############# Batteries
Battery <- function(Models, Start_pct=80, Min_pct=40){
  Capacity <- 13.5*3 # kWh for 3 batteries 
  
  Maxpower <- 5*3 # kW
  Start_pct=80
  Min_pct=40
  
  Models$Grid <- 0
  Models$Battery <- NA
  
  Flag <- 0 # Flag for new model
  # for (i in 1:10){
  for (i in 1:nrow(Models)){
    if (Flag != Models$Model[i]){ # start a new model
      print("--1--")
      Flag <- Models$Model[i]
      Lag_Battery <- Capacity*Start_pct/100
    } else {
      print("--2--")
      Lag_Battery <- Models$Battery[i-1]
    }
    
    #   Excess is net demand. If >0 then solar exceeds demand.
    Excess <- Models$Sun[i] - Models$Car[i] - Models$kWh[i] # House and car usage offset by solar panels.
    print(Excess)
    Batt_headroom <- Capacity - Lag_Battery # Room left to get to 100%
    Batt_tailroom <- Lag_Battery - Capacity*Min_pct/100 # Room left to fall to minimum
    ########   add constraint on battery ability to charge
    Add_grid <- max(0, Excess - Batt_headroom) # power to add to grid
    Sub_grid <- max(0, Excess - Batt_tailroom) # power to take from grid
    if (Excess>0){ # yes Virginia we have excess electrons
      if (Lag_Battery<Capacity){ # Battery not fully charged
          Models$Battery[i] <-  Lag_Battery + Excess - Add_grid
          Models$Grid[i] <- Add_grid
      } else { # battery fully charged
          Models$Battery[i] <-  Lag_Battery
          Models$Grid[i] <- -Excess
      } 
    }  else { # Nope, no excess electrons
      if (Batt_tailroom > 0) { # Battery still has available charge
        Models$Battery[i] <- Lag_Battery + Excess - Sub_grid
        Models$Grid[i] <- Sub_grid
          # Models$Battery[i] <-  Lag_Battery + Excess
      } else { # Nope, battery at minimum
          Models$Battery[i] <-  Lag_Battery
          Models$Grid[i] <- -Excess
      } 
    } 
  } 
}

#############
```

##        Test functions

```{r Home}
#   Pick 5000 hours at random
# foo <- as.integer(round(runif(5000)*23)) %>% 
#   as_tibble() %>% 
#   set_names(c("Hour")) 
# 
# #   Add a random month to each row
# foo <- foo %>% 
#   rowwise() %>% 
#   mutate(Month=as.integer(round(runif(1)*11+1))) %>% 
#   ungroup()

#   Create 6912 samples of hours and months
#   24 separate models

foo <- 
  gl(24, 288, labels=c(1:24)) %>% 
  as_tibble() %>% 
  set_names(c("Model")) %>% 
  bind_cols(., rep(gl(12,24),24) %>% as_tibble() %>% set_names("Month")) %>% 
  mutate(Month=as.integer(Month)) %>%
  bind_cols(., rep(rep(0:23, 288)) %>% as_tibble() %>% set_names("Hour"))
   
  

# foo <-
#   gl(24, 240, labels=c(0:23)) %>% 
#   as_tibble() %>% 
#   set_names(c("Hour")) %>% 
#     mutate(Hour=as.integer(Hour)) %>% 
#   bind_cols(., rep(1:12, 480) %>% as_tibble() %>% set_names("Month"))

##################
#   Get the Temperature for that month and hour
##################
foo <- 
  foo %>% 
    rowwise() %>% 
  mutate(Temp=Weather(Month, Hour))

Occupied <- "Occupied"
Vacation <- "Vacation"

##################
#   Calculate kWh usage
##################
foo <-
  foo %>% 
  mutate(kWh=Home(Temp, Hour, Occupied)) %>% 
  mutate(kWhV=Home(Temp, Hour, Vacation)) %>% 
  ungroup()

##################
#   Add in cars
##################

foo <- foo %>% 
  mutate(Car=dexp(Hour)*1.7)

##################
#   Add Solar output
##################

foo <- foo %>% 
  rowwise() %>% 
  mutate(Sun=Solar(Month, Hour)) %>% 
  ungroup()


#   Make some plots

foo %>% 
  mutate(kWh=kWh+Car) %>% 
  # ungroup() %>% 
  filter(Month==6) %>% 
  ggplot(aes(x=kWh))+
  facet_wrap(vars(Temp))+
  geom_histogram()

foo %>% 
  # ungroup() %>% 
  filter(Month==6) %>% 
  ggplot(aes(x=kWhV))+
  facet_wrap(vars(Temp))+
  geom_histogram()

foo %>% 
  # ungroup() %>% 
  ggplot(aes(x=Hour))+
  facet_wrap(vars(Temp))+
  geom_histogram()

foo %>% 
  mutate(kWh=kWh+Car) %>% 
  # ungroup() %>% 
  filter(between(Hour, 12, 18)) %>% 
  ggplot(aes(x=kWh)) +
  facet_wrap(vars(Month))+
  geom_histogram()

AugustDay <- as.integer(round(runif(5000)*23)) %>% 
  as_tibble() %>% 
  set_names(c("Hour")) %>% 
  mutate(Month=8) %>% 
      rowwise() %>% 
  mutate(Sun=Solar(Month, Hour)) %>% 
  ungroup()

AugustDay %>% 
  ggplot(aes(x=Hour, y=Sun)) +
  geom_point()

AugustDay %>% 
  mutate(Hour=as.factor(round(Hour))) %>% 
    ggplot(aes(x=Sun, y=Hour, fill=stat(x)))+
    ggridges::geom_density_ridges_gradient(scale=2.5, panel_scaling = FALSE)+
    scale_fill_viridis_c(name = "kWh", option = "C")+
    labs(title="Solar Production vs. Hour of Day",
         subtitle="For August, statistical derivation",
       x="kWh",
       y="Hour of Day") 

```

##        More plots

```{r more plots}

foo %>% 
  mutate(Net_kWh=Sun-kWh) %>% 
  group_by(Month) %>% 
    summarise(Mon_Sun=mean(Sun)*24,
              Mon_Net=mean(Net_kWh)*24,
              Mon_Hom=mean(kWh)*24) %>% 
  gt::gt()
  

foo %>% 
  mutate(Net_kWh=Sun-kWhV) %>% 
  filter(Hour==13) %>% 
  ggplot(aes(x=kWh)) + 
  geom_density() + 
  facet_wrap(vars(Month))
  



```

##      Batteries

```{r batteries}

```







