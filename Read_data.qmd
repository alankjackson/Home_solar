---
title: "Read_data"
author: "Alan jackson"
format: html
editor: visual
---

## Read in various datasets

Read in and clean up data from solar panels, weather data, ERCOT data, and Smartmeter data.

```{r init}
#| echo: false

library(tidyverse)
library(lubridate)
library(tidyjson)

#   Time zone

tz <- "America/Chicago"

path <- "/home/ajackson/Dropbox/Rprojects/Tulane_Solar/Data/"

```

## Functions

```{r functions}

# Remove DST from date times. Input a string mm/dd/yyy hh:mm , and timezone
Un_dst <- function(Dates, tz){ 
  Dates %>% 
    mutate(LDate=mdy_hms(paste(Date, Time), tz=tz)) %>% 
    mutate(DST=dst(LDate)) %>% 
    mutate(DST=dst(LDate) | dst(LDate-1)) %>% 
    mutate(UDate=mdy_hms(paste(Date, Time), tz="UTC")) %>% 
    group_by(Type, date(LDate)) %>% # this takes care of Fall transition day, almost
       mutate(ToShift=duplicated(UDate, fromLast=TRUE)) %>% 
    ungroup() %>% 
    filter(!is.na(DST)) %>% 
    mutate(NewDate=if_else(DST|ToShift, UDate-hours(1), UDate)) %>% 
    select(-LDate, -DST, -ToShift, -UDate, -`date(LDate)`)
}

```

## Read the Tesla data

```{r read Tesla data}
#| echo: true
 
#   Read numbers downloaded from app (new system and old system)

filenames <- list.files(path = path,
                        pattern="data[0-9]+.csv$")

filenames <- paste0(path,filenames)

df <- filenames %>% 
  purrr::map_dfr(read_csv, col_types="cccccc") 

df <- df %>% 
  mutate(Date=lubridate::ymd_hms(`Date time`, tz="UTC")-hours(6)) %>% 
  #select(-`Date time`) %>% 
  rename(Home=`Home (kW)`,
         Solar=`Solar (kW)`,
         Powerwall=`Powerwall (kW)`,
         Grid=`Grid (kW)`,
         Pct_remain=`Energy Remaining (%)`) %>% 
  mutate(Home=as.numeric(Home),
         Solar=as.numeric(Solar),
         Powerwall=as.numeric(Powerwall),
         Grid=as.numeric(Grid),
         Pct_remain=as.numeric(Pct_remain))

App_new <- df

###################   old system from app

filenames <- list.files(path = path,
                        pattern="data[0-9]+a.csv$")

filenames <- paste0(path,filenames)

df <- filenames %>% 
  purrr::map_dfr(read_csv, col_types="cc") 

df <- df %>% 
  mutate(Date=lubridate::ymd_hms(`Date time`, tz="UTC")-hours(6)) %>% 
  select(-`Date time`) %>% 
  rename(
         Solar=`Solar (kW)`
         ) %>% 
  mutate(Solar=as.numeric(Solar)) 

App_old <- df


# Read in values pulled off database with python (are these instantaneous values?)

#########   Old data from Susan's account

##    Note units are now Watts

df <- read_csv(paste0(path, "Susan_Tesla_Solar_1.csv"), col_types="cccccc") %>% 
  filter(Timestamp!="Timestamp") %>% 
  mutate(Timestamp=lubridate::ymd_hms(Timestamp, tz="UTC")-hours(6),
         Solar_W=as.numeric(Solar_kW)) %>% 
  select(Timestamp, Solar_W)

df2 <- read_csv(paste0(path, "Susan_Tesla_Solar_2.csv"), col_types="cccccc") %>% 
  filter(Timestamp!="Timestamp") %>% 
  mutate(Timestamp=lubridate::ymd_hms(Timestamp, tz="UTC")-hours(6),
         Solar_W=as.numeric(Solar_kW)) %>% 
  select(Timestamp, Solar_W)

df <- rbind(df, df2)

df2 <- read_csv(paste0(path, "Susan_Tesla_Solar_3.csv"), col_types="cccccc") %>% 
  filter(Timestamp!="Timestamp") %>% 
  mutate(Timestamp=lubridate::ymd_hms(Timestamp, tz="UTC")-hours(6),
         Solar_W=as.numeric(Solar_kW)) %>% 
  select(Timestamp, Solar_W)

foo <- df2 %>% 
  filter(Timestamp!="Timestamp") %>% 
  mutate(Timestamp=lubridate::ymd_hms(Timestamp, tz="UTC")-hours(6),
         Solar_W=as.numeric(Solar_kW)) %>% 
  select(Timestamp, Solar_kW) %>% 
  filter(lag(Solar_kW)==0) %>% 
  filter(Solar_kW>0) %>% 
  mutate(OldTime=lag(Timestamp)) %>%
  filter(Solar_kW<200) %>% 
  mutate(Delta=Timestamp-OldTime-1440) %>% 
  filter(abs(Delta)<120) %>% 
  mutate(Sunrise=hour(Timestamp)*60 + minute(Timestamp))

foo %>% 
  ggplot(aes(x=Timestamp, y=Sunrise)) +
  geom_line()

df <- rbind(df, df2)

df2 <- read_csv(paste0(path, "Susan_Tesla_Solar_4.csv"), col_types="cccccc") %>% 
  filter(Timestamp!="Timestamp") %>% 
  mutate(Timestamp=lubridate::ymd_hms(Timestamp, tz="UTC")-hours(6),
         Solar_W=as.numeric(Solar_kW)) %>% 
  select(Timestamp, Solar_W)

df <- rbind(df, df2) %>% 
  arrange(Timestamp)

Solar_old <- df

#########   New data from Alan's account

##    Note units are now Watts

df <- read_csv(paste0(path, "Alan_Tesla_Solar_1.csv"), col_types="cccccc") %>% 
  filter(Timestamp!="Timestamp") %>% 
  mutate(Timestamp=lubridate::ymd_hms(Timestamp, tz="UTC")-hours(6),
         Solar_W=as.numeric(Solar_kW),
         Battery_W=as.numeric(Battery_kW),
         Grid_W=as.numeric(Grid_kW)) %>% 
  select(Timestamp, Solar_W, Battery_W, Grid_W)

df2 <- read_csv(paste0(path, "Alan_Tesla_Solar_2.csv"), col_types="cccccc") %>% 
  filter(Timestamp!="Timestamp") %>% 
  mutate(Timestamp=lubridate::ymd_hms(Timestamp, tz="UTC")-hours(6),
         Solar_W=as.numeric(Solar_kW),
         Battery_W=as.numeric(Battery_kW),
         Grid_W=as.numeric(Grid_kW)) %>% 
  select(Timestamp, Solar_W, Battery_W, Grid_W)

df <- rbind(df, df2)

df2 <- read_csv(paste0(path, "Alan_Tesla_Solar_3.csv"), col_types="cccccc") %>% 
  filter(Timestamp!="Timestamp") %>% 
  mutate(Timestamp=lubridate::ymd_hms(Timestamp, tz="UTC")-hours(6),
         Solar_W=as.numeric(Solar_kW),
         Battery_W=as.numeric(Battery_kW),
         Grid_W=as.numeric(Grid_kW)) %>% 
  select(Timestamp, Solar_W, Battery_W, Grid_W)

df <- rbind(df, df2) %>% distinct()

df2 <- read_csv(paste0(path, "Alan_Tesla_Solar_4.csv"), col_types="cccccc") %>% 
  filter(Timestamp!="Timestamp") %>% 
  mutate(Timestamp=lubridate::ymd_hms(Timestamp, tz="UTC")-hours(6),
         Solar_W=as.numeric(Solar_kW),
         Battery_W=as.numeric(Battery_kW),
         Grid_W=as.numeric(Grid_kW)) %>% 
  select(Timestamp, Solar_W, Battery_W, Grid_W)

df <- rbind(df, df2) %>% distinct()

Solar_new <- df


```

## Read the ERCOT data

ERCOT data from https://www.ercot.com/mktinfo/prices

```{r ercot}

#   each month is a separate tab

#       first we do 2022
sheets <- paste0(path, "Ercot_2022.xlsx") %>% 
  readxl::excel_sheets() %>% 
  set_names()
  
df <- map_df(sheets,
              ~ readxl::read_excel(path=paste0(path, "Ercot_2022.xlsx"),
                                   sheet = .x), .id = "sheet")

#       now we do 2021-2014

for (i in 14:21){
  in_file <- paste0("Ercot_20", i, ".xlsx")
  print(paste("---", i, in_file))
  sheets <- paste0(path, in_file) %>% # get names of sheets
    readxl::excel_sheets() %>% 
    set_names()
  
  df <- df %>% 
    rbind(map_df(sheets,
                ~ readxl::read_excel(path=paste0(path, in_file),
                                     sheet = .x), .id = "sheet"))
}

#   Look only at Houston Hub and Load Zone data and convert to actual time-date data

df2 <- df %>% 
  filter(stringr::str_detect(`Settlement Point Name`, "HOUSTON")) %>% 
  select(Date=`Delivery Date`,
         Hour=`Delivery Hour`,
         Interval=`Delivery Interval`,
         Price=`Settlement Point Price`,
         Repeat=`Repeated Hour Flag`,
         Name=`Settlement Point Name`)

#   What are LZ and LZEW load zones for Houston? No f(*&ing idea.

foo <- df2 %>% 
  mutate(Date=lubridate::mdy_hm(paste(Date,
                                      as.character(Hour-1),
                                      as.character((Interval-1)*15)))) %>% 
  pivot_wider(Date, names_from = "Name", values_from = "Price") %>% 
  rowwise() %>% 
  mutate(LZ1=unlist(LZ_HOUSTON)[1], LZ2=unlist(LZ_HOUSTON)[2], HUB=HB_HOUSTON[[1]]) %>% 
  mutate(DeltaLZ=LZ1-LZ2, Delta_Hub=LZ1-HUB)

#   Don't know the difference between LZ and LZEW load zones, so I will 
#   average them since the differences are usually quite small

#   Convert to UTC

df3 <- df2 %>% 
    mutate(LDate=lubridate::mdy_hm(paste0(Date, " ",
                                      as.character(Hour-1), ":",
                                      as.character((Interval-1)*15)),tz=tz)) %>% 
    mutate(DST=dst(LDate)) %>% 
    mutate(UDate=lubridate::mdy_hm(paste0(Date, " ",
                                      as.character(Hour-1), ":",
                                      as.character((Interval-1)*15)), tz="UTC")) %>% 
    mutate(NewDate=if_else(DST|(Repeat=='Y'), UDate-hours(1), UDate)) %>% 
    select(-LDate, -DST, -Repeat, -UDate)

df <- df3 %>% 
  pivot_wider(NewDate, names_from = "Name", values_from = "Price") %>% 
  rowwise() %>% 
  mutate(LZ1=unlist(LZ_HOUSTON)[1], LZ2=unlist(LZ_HOUSTON)[2], HUB=HB_HOUSTON[[1]]) %>% 
  mutate(Hub_price=HUB, LZ_price=mean(LZ1, LZ2)) %>% 
  select(Date=NewDate, Hub_price, LZ_price) %>% 
  ungroup()

#   Don't know why this helps, but it helps immensely - it's rowwise!!

Ercot <- df %>% as_tibble()

```

## Read in the Smart Meter data

```{r smart meter}

df <- read_csv(paste0(path, "SmartMeter_IntervalData.csv"))

df2 <- df %>% 
  select(USAGE_DATE, USAGE_START_TIME, USAGE_KWH, 
         CONSUMPTION_SURPLUSGENERATION) %>% 
  rename(Type=CONSUMPTION_SURPLUSGENERATION, 
         Date=USAGE_DATE, 
         kWh=USAGE_KWH,
         Time=USAGE_START_TIME)

df <- read_csv(paste0(path, "Smartmeter_Dec29_Feb18_2023.csv"))

df2 <- df %>% 
  select(USAGE_DATE, USAGE_START_TIME, USAGE_KWH, 
         CONSUMPTION_SURPLUSGENERATION) %>% 
  rename(Type=CONSUMPTION_SURPLUSGENERATION, 
         Date=USAGE_DATE, 
         kWh=USAGE_KWH,
         Time=USAGE_START_TIME) %>% 
  bind_rows(df2, .)


#   Convert to UTC

df2 <- df2 %>% 
  filter(!is.na(kWh)) %>% 
  mutate(LDate=mdy_hms(paste(Date, Time), tz=tz)) %>% 
  # filter((LDate>mdy_hm("03-11-2021 00:00", tz=tz) & 
  #        LDate<mdy_hm("03-28-2021 00:00", tz=tz))|
  #        (LDate>mdy_hm("11-03-2021 00:00", tz=tz)&
  #        LDate<mdy_hm("11-12-2021 00:00", tz=tz)) 
  #          ) %>%
    mutate(DST=dst(LDate)) %>% 
    mutate(DST=dst(LDate) | dst(LDate-1)) %>% 
    mutate(UDate=mdy_hms(paste(Date, Time), tz="UTC")) %>% 
    group_by(Type, date(LDate)) %>% # this takes care of Fall transition day, almost
       mutate(ToShift=duplicated(UDate, fromLast=TRUE)) %>% 
    ungroup() %>% 
    filter(!is.na(DST)) %>% 
    mutate(NewDate=if_else(DST|ToShift, UDate-hours(1), UDate)) %>% 
    select(-LDate, -DST, -ToShift, -UDate, -`date(LDate)`)

# foo <- df3 %>% 
#   filter(Type=="Surplus Generation") %>% 
#   filter(NewDate<mdy_hm("03-28-2021 00:00", tz="UTC")) %>% 
#   filter(lag(kWh)==0) %>% 
#   filter(kWh>0) %>% 
#   mutate(OldTime=lag(Time)) %>%
#   #filter(Solar_kW<200) %>% 
#   mutate(Delta=Time-OldTime)  %>% 
#   #filter(abs(Delta)<120) %>% 
#   mutate(Sunrise=hour(NewDate) + minute(NewDate)/60)
# 
# foo %>% filter(Sunrise<9) %>% 
#   ggplot(aes(x=NewDate, y=Sunrise)) +
#   geom_point()

df2 <- df2 %>% 
  pivot_wider(NewDate, names_from="Type", 
              values_from="kWh") %>% 
  select(Date=NewDate, Consumption, Generation=`Surplus Generation`) 

Smart <- df2

```

## Read in the weather data (for IAH)

```{r IAH weather}

#   Thankfully, weather data is reported in UTC, no daylight savings

df <- read_csv(paste0(path, "WeatherData.csv"))

df2 <- df %>% 
  select(Date=DATE,
         Dewpoint=HourlyDewPointTemperature,
         Temperature=HourlyDryBulbTemperature,
         Precip=HourlyPrecipitation,
         Humidity=HourlyRelativeHumidity,
         Wind_dir=HourlyWindDirection,
         Wind_spd=HourlyWindSpeed,
         Sky=HourlySkyConditions) %>% 
  mutate(Date=lubridate::ymd_hms(Date)) %>% 
  mutate(Precip=as.numeric(if_else(stringr::str_detect(Precip, "T"), 
                                   "0.001", Precip))) %>% 
  mutate(Overcast=stringr::str_detect(Sky, "OVC")) %>% 
  filter(!is.na(Temperature)) %>% 
  filter(!is.na(Precip))

Weather <- df2

```

## Build file of dates when we were not at home

```{r vacation}

Vaca <- seq(lubridate::mdy("4/11/21"),lubridate::mdy("5/5/21"), by=1)
Vaca <- c(Vaca, seq(lubridate::mdy("5/12/21"),lubridate::mdy("6/16/21"),by=1))
Vaca <- c(Vaca, seq(lubridate::mdy("6/23/21"),lubridate::mdy("10/16/21"),by=1))
Vaca <- c(Vaca, seq(lubridate::mdy("10/21/21"),lubridate::mdy("10/29/21"),by=1))
Vaca <- c(Vaca, seq(lubridate::mdy("12/21/21"),lubridate::mdy("12/26/21"),by=1))
Vaca <- c(Vaca, seq(lubridate::mdy("5/15/22"),lubridate::mdy("5/30/22"),by=1))
Vaca <- c(Vaca, seq(lubridate::mdy("6/7/22"),lubridate::mdy("6/26/22"),by=1))
Vaca <- c(Vaca, seq(lubridate::mdy("6/28/22"),lubridate::mdy("9/29/22"),by=1))
Vaca <- c(Vaca, seq(lubridate::mdy("10/25/22"),lubridate::mdy("11/01/22"),by=1))
Vaca <- c(Vaca, seq(lubridate::mdy("11/21/22"),lubridate::mdy("11/24/22"),by=1))

Vaca <- lubridate::as_date(Vaca)

saveRDS(Vaca, paste0(path, "Vacation.rds"))

```

##    Nest data

Doesn't have what I want in it.

```{r nest}

# df <-  read_json(paste0(path, "/2023-02-summary.json")) %>% 
#   spread_all()  
# 
# df <-  read_json(paste0(path, "/2023-02-summary.json")) %>% 
#   # gather_object() %>% 
#   #head(1) %>% 
#   # select("..JSON") %>%
#   enter_object("2023-02-08T00:00:00Z") %>%  
#   # gather_object %>% json_types %>% count(name, type)
#   enter_object("events") %>% 
#   gather_array() %>% 
#   spread_all()
#   gather_object %>% json_types %>% count(name, type)
# 
# df <-  read_json(paste0(path, "/2023-02-summary.json")) %>% 
#   gather_object %>% json_types %>% count(name, type)

```


## Save our cleaned files

```{r save}

saveRDS(Ercot, paste0(path, "Ercot.rds"))
saveRDS(Smart, paste0(path, "Smart.rds"))
saveRDS(Weather, paste0(path, "Weather.rds"))

saveRDS(Solar_old, paste0(path, "Solar_old.rds"))
saveRDS(Solar_new, paste0(path, "Solar_new.rds"))
saveRDS(App_old, paste0(path, "App_old.rds"))
saveRDS(App_new, paste0(path, "App_new.rds"))

```
