---
title: "Read_data"
author: "Alan jackson"
format: html
editor: visual
---

## Read in various datasets

Read in and clean up data from solar panels, weather data, ERCOT data, and
Smartmeter data.


```{r init}
#| echo: false

library(tidyverse)

path <- "/home/ajackson/Dropbox/Rprojects/Tulane_Solar/Data/"

```

##   Read the Tesla data

```{r read Tesla data}
#| echo: true
 
filenames <- list.files(path = path,
                        pattern="data.*csv$")

filenames <- paste0(path,filenames)

df <- filenames %>% 
  purrr::map_dfr(read_csv) 

df <- df %>% 
  mutate(Date=lubridate::ymd_hms(`Date time`)) %>% 
  select(-`Date time`) %>% 
  rename(Home=`Home (kW)`,
         Solar=`Solar (kW)`,
         Powerwall=`Powerwall (kW)`,
         Grid=`Grid (kW)`,
         Pct_remain=`Energy Remaining (%)`)

Home <- df

```

##        Read the ERCOT data

```{r ercot}

#   each month is a separate tab

#       first we do 2022
sheets <- paste0(path, "Ercot_2022.xlsx") %>% 
  readxl::excel_sheets() %>% 
  set_names()
  
df <- map_df(sheets,
              ~ readxl::read_excel(path=paste0(path, "Ercot_2022.xlsx"),
                                   sheet = .x), .id = "sheet")

#       now we do 2021-2014

for (i in 14:21){
  in_file <- paste0("Ercot_20", i, ".xlsx")
  print(paste("---", i, in_file))
  sheets <- paste0(path, in_file) %>% # get names of sheets
    readxl::excel_sheets() %>% 
    set_names()
  
  df <- df %>% 
    rbind(map_df(sheets,
                ~ readxl::read_excel(path=paste0(path, in_file),
                                     sheet = .x), .id = "sheet"))
}

#   Look only at Houston Hub and Load Zone data and convert to actual time-date data

df2 <- df %>% 
  filter(stringr::str_detect(`Settlement Point Name`, "HOUSTON")) %>% 
  select(Date=`Delivery Date`,
         Hour=`Delivery Hour`,
         Interval=`Delivery Interval`,
         Price=`Settlement Point Price`,
         Name=`Settlement Point Name`)

#   What are LZ and LZEW load zones for Houston? No f(*&ing idea.

foo <- df2 %>% 
  mutate(Date=lubridate::mdy_hm(paste(Date,
                                      as.character(Hour),
                                      as.character((Interval-1)*15)))) %>% 
  pivot_wider(Date, names_from = "Name", values_from = "Price") %>% 
  rowwise() %>% 
  mutate(LZ1=unlist(LZ_HOUSTON)[1], LZ2=unlist(LZ_HOUSTON)[2], HUB=HB_HOUSTON[[1]]) %>% 
  mutate(DeltaLZ=LZ1-LZ2, Delta_Hub=LZ1-HUB)

#   Don't know the difference between LZ and LZEW load zones, so I will 
#   average them since the differences are usually quite small

df <- df2 %>% 
  mutate(Date=lubridate::mdy_hm(paste(Date,
                                      as.character(Hour),
                                      as.character((Interval-1)*15)))) %>% 
  pivot_wider(Date, names_from = "Name", values_from = "Price") %>% 
  rowwise() %>% 
  mutate(LZ1=unlist(LZ_HOUSTON)[1], LZ2=unlist(LZ_HOUSTON)[2], HUB=HB_HOUSTON[[1]]) %>% 
  mutate(Hub_price=HUB, LZ_price=mean(LZ1, LZ2)) %>% 
  select(Date, Hub_price, LZ_price)

#   Don't know why this helps, but it helps immensely

Ercot <- df %>% as_tibble()

```

##        Read in the Smart Meter data

```{r smart meter}

df <- read_csv(paste0(path, "SmartMeter_IntervalData.csv"))

df2 <- df %>% 
  select(USAGE_DATE, USAGE_START_TIME, USAGE_KWH, 
         CONSUMPTION_SURPLUSGENERATION) %>% 
  mutate(USAGE_KWH=if_else(stringr::str_detect(CONSUMPTION_SURPLUSGENERATION,
                                               "Surplus Generation"), 
                           USAGE_KWH*-1,
                           USAGE_KWH)) %>% 
  mutate(Date=lubridate::mdy_hms(paste0(USAGE_DATE, USAGE_START_TIME))) %>% 
  select(Date, Usage=USAGE_KWH)

Smart <- df2

```

##        Read in the weather data (for IAH)

```{r IAH weather}

df <- read_csv(paste0(path, "WeatherData.csv"))

df2 <- df %>% 
  select(Date=DATE,
         Dewpoint=HourlyDewPointTemperature,
         Temperature=HourlyDryBulbTemperature,
         Precip=HourlyPrecipitation,
         Humidity=HourlyRelativeHumidity,
         Wind_dir=HourlyWindDirection,
         Wind_spd=HourlyWindSpeed,
         Sky=HourlySkyConditions) %>% 
  mutate(Date=lubridate::ymd_hms(Date)) %>% 
  mutate(Precip=as.numeric(if_else(stringr::str_detect(Precip, "T"), 
                                   "0.001", Precip))) %>% 
  mutate(Overcast=stringr::str_detect(Sky, "OVC")) %>% 
  filter(!is.na(Temperature)) %>% 
  filter(!is.na(Precip))

Weather <- df2

```

##        Save our cleaned files

```{r save}

saveRDS(Ercot, paste0(path, "Ercot.rds"))
saveRDS(Home, paste0(path, "Home.rds"))
saveRDS(Smart, paste0(path, "Smart.rds"))
saveRDS(Weather, paste0(path, "Weather.rds"))

```












