---
title: "Analyze ERCoT Data"
author: "Alan Jackson"
format: html
editor: visual
---

## Develop a cost model

To analyze various solar buyback plans, I need to have an ERCOT model that will let me estimate what sort of wholesale prices might be available.

```{r initialize}

library(tidyverse)

path <- "/home/ajackson/Dropbox/Rprojects/Tulane_Solar/Data/"

df <- readRDS(paste0(path, "Ercot.rds"))

```

## Look at the data

Let's look at the data to get a feel for what is going on

```{r initial look}

df <- df %>% as_tibble() %>% 
  mutate(Hour=lubridate::hour(Date)) %>%
  #   Create nice x-axis labels
  mutate(Time=paste0(stringr::str_pad(Hour,2,"left","0"), ":" ,
                     stringr::str_pad(lubridate::minute(Date), 2, "left", "0"))) %>%
  mutate(Month=lubridate::month(Date, label=TRUE)) %>%
  #   Allow for some consolidation
  mutate(Year=lubridate::year(Date))  %>%
  mutate(Day_time=paste0(stringr::str_pad(lubridate::day(Date),2,"left","0"),
                         ":", Time))

#   quick look

df %>% 
  ggplot(aes(x=Day_time, y=LZ_price)) +
  geom_point()+
  facet_wrap(vars(Month))+
  scale_y_continuous(labels=scales::dollar_format())+
  scale_x_discrete(breaks=c("00:00", "04:00", "08:00", "12:00",
                            "16:00", "20:00", "24:00")) +
  labs(title="ERCOT Price Data at Houston Load Zone",
       subtitle="2014 to 2022",
       x="Day of Month",
       y="Dollars per mWh")

#   Let's look at the extreme values in greater detail

df %>% 
  filter(LZ_price>0) %>% 
  ggplot(aes(x=LZ_price)) +
  geom_histogram() +
  facet_wrap(vars(Month), scales="free_x")+
  scale_x_log10(labels=scales::dollar_format()) +
  #scale_x_continuous(labels=scales::dollar_format())+
  labs(title="ERCOT Price Data at Houston Load Zone - Log Scaling",
       subtitle="2014 to 2022",
       x="Dollars per mWh")

df %>% 
  filter(Year>2021) %>% 
  ggplot(aes(y=LZ_price, x=Date)) +
  geom_line() +
  scale_y_continuous(labels=scales::dollar_format())+
  facet_wrap(vars(lubridate::month(Date)), ncol=1, scales="free")+
  labs(title="ERCoT Price Data at Houston Zone",
       subtitle="2022 (Note that vertical scales vary with row)",
       x="Date",
       y="Dollars per mWh")

winsor <-  function (x, multiple=3) {
   if(length(multiple) != 1 || multiple <= 0) {
      stop("bad value for 'multiple'")
   }
   med <- median(x)
   y <- x - med
   sc <- mad(y, center=0) * multiple
   y[ y > sc ] <- sc
   y[ y < -sc ] <- -sc
   return(y + med)
}

cbind(orig=df$LZ_price, new=winsor(df$LZ_price)) %>% 
  as_tibble() %>% 
  ggplot(aes(x=orig, y=new))+
  geom_point()

# df %>% 
#   filter(Year==2021) %>% 
#   ggplot(aes(y=LZ_price, x=Date)) +
#   geom_line() +
#   facet_wrap(vars(lubridate::month(Date)), ncol=1, scales="free")+
#   labs(title="ERCoT Price Data at Houston Hub",
#        subtitle="2021",
#        x="Dollars per mWh")



  #   Eliminate the Valentine's freeze data
  # filter(Date<lubridate::ymd("2021-02-14") | 
  #        Date>lubridate::ymd("2021-02-20"))


```

## Fit the data

```{r fitting}
foo <- df %>% 
  #   Eliminate the Valentine's freeze data
  filter(Date<lubridate::ymd("2021-02-14") | 
         Date>lubridate::ymd("2021-02-20"))

foo <- foo %>% 
  mutate(LZ_price=LZ_price+70) %>% # offset to get rid of negative numbers
  mutate(week=lubridate::week(Date)) %>% 
  filter(week<53)

#   Calculate a few gaussian stats on Winsorized data

#   Weekly stats
foo %>% 
  mutate(LZ_price=LZ_price-70) %>% 
  group_by(week) %>% 
    mutate(winsor=winsor(LZ_price)) %>% 
    summarize(mean=mean(winsor), med=median(winsor), sd=sd(winsor)) %>% 
  select(week, mean, med, sd) %>% 
  pivot_longer(!week, names_to = "Statistic", values_to = "Value") %>% 
  ggplot(aes(x=Value)) +
  geom_histogram(aes(y=..density..),  
                 #binwidth=.5,
                 colour="black", 
                 fill="white", 
                 bins = 15)+
  geom_density(alpha=.2, fill="#FF6666")+  # Overlay with transparent density plot
  scale_x_continuous(labels=scales::dollar_format())+
  facet_wrap(vars(Statistic), scales="free")+
  labs(title="ERCOT Houston Load Zone Weekly Statistics",
       subtitle="2014-2022, Winsorized data",
       x="Dollars per mWh")

foo %>% 
  mutate(LZ_price=LZ_price-70) %>% 
  group_by(week) %>% 
    mutate(winsor=winsor(LZ_price)) %>% 
    summarize(mean=mean(winsor), med=median(winsor), sd=sd(winsor)) %>% 
  select(week, mean, med, sd) %>% 
  pivot_longer(!week, names_to = "Statistic", values_to = "Value") %>% 
  ggplot(aes(x=week, y=Value, color=Statistic, group=Statistic )) +
  geom_point()+
  geom_line()+
  scale_y_continuous(labels=scales::dollar_format())+
  labs(title="Weekly Houston Load Zone Price Data Winsorized Statistics by Week",
       subtitle="2014-2922",
       x="Week of Year",
       y="Price in Dollars per mWh")

#   Hourly stats
foo %>% 
  mutate(LZ_price=LZ_price-70) %>% 
  group_by(Hour) %>% 
    mutate(winsor=winsor(LZ_price)) %>% 
    summarize(mean=mean(winsor), med=median(winsor), sd=sd(winsor)) %>% 
  select(Hour, mean, med, sd) %>% 
  pivot_longer(!Hour, names_to = "Statistic", values_to = "Value") %>% 
  ggplot(aes(x=Value)) +
  geom_histogram(aes(y=..density..),  
                 #binwidth=.5,
                 colour="black", 
                 fill="white", 
                 bins = 15)+
  geom_density(alpha=.2, fill="#FF6666")+  # Overlay with transparent density plot
  scale_x_continuous(labels=scales::dollar_format())+
  facet_wrap(vars(Statistic), scales="free")+
  labs(title="ERCOT Houston Load Zone Hourly Statistics",
       subtitle="2014-2022, Winsorized data",
       x="Dollars per mWh")

#   Average Hourly price

foo %>% 
  mutate(LZ_price=LZ_price-70) %>% 
  group_by(Hour) %>% 
    mutate(winsor=winsor(LZ_price)) %>% 
    summarize(mean=mean(winsor), med=median(winsor), sd=sd(winsor)) %>% 
  select(Hour, mean, med, sd) %>% 
  pivot_longer(!Hour, names_to = "Statistic", values_to = "Value") %>% 
  ggplot(aes(x=Hour, y=Value, color=Statistic, group=Statistic )) +
  geom_point()+
  geom_line()+
  scale_y_continuous(labels=scales::dollar_format())+
  labs(title="Hourly Houston Load Zone Price Data Winsorized Statistics by Time of Day",
       subtitle="2014-2922",
       x="Hour of Day",
       y="Price in Dollars per mWh")
```

```{r Cauchy fitting}
#####   Let's do some more fitting

#   Fit Cauchy to data at 16:00 in August to start

Cauchy <- foo %>% 
  filter(Hour==16) %>%
  filter(Month=="Aug") %>% 
  summarize(vec=list(LZ_price)) %>% 
  mutate(fit = list(MASS::fitdistr(unlist(vec), 'cauchy'))) %>% 
  mutate(location=fit[[1]]$estimate[1],
         scale=fit[[1]]$estimate[2],
         location_sd=fit[[1]]$sd[1],
         scale_sd=fit[[1]]$sd[2])
 
#   histogram and PDF
Cauchy %>% ungroup() %>%
  unnest(vec) %>%
  ggplot(aes(x=vec))+
  geom_histogram(aes(y=..density..),# Histogram with density instead of count on y-axis
                   binwidth=25,
                   colour="black", fill="white") +
  stat_function(fun = dcauchy, args = list(location = 111.65, scale = 17.7), color="red")

#   Compare CDF's
as_tibble(x=seq(0,9000,100)) %>%
  ggplot(aes(x=value)) +
  stat_function(fun=pcauchy, args=list(location = 111.65, scale = 217.7))+
  stat_ecdf(data=foo %>% filter(Hour==16) %>% filter(Month=="Aug"), 
            aes(x=LZ_price), color="red")
```

```{r functions}

#   https://rdrr.io/github/sethmcg/climod/src/R/pdf2cdf.R
pdf2cdf <- function(p, x=NULL, normalize=TRUE, expand=FALSE){
    if(is.null(x)) {
        if(is.atomic(p)){
            y <- p
            x <- seq(length(y))
        } else {
            stopifnot(exists("x", where=p) && exists("y", where=p))
            y <- p$y
            x <- p$x
        }
    } else {
        stopifnot(is.atomic(p) && is.atomic(x))
        y <- p
    }
    
    stopifnot(length(x)==length(y))
    stopifnot(length(x) > 2)
    stopifnot(all(is.finite(x)))
    stopifnot(all(is.finite(y)))
    stopifnot(all(diff(x) > 0))

    if(any(y < 0)){
        y[y < 0] <- 0
    }
    
    ## trapezoids: N = no., L = left height, R = right height, W = width
    N <- length(y) + 1
    L <- c(0,y)
    R <- c(y,0)
    W <- diff(x)
    W <- c(W[1], W, W[N-2])
    area <- W * (L + R) / 2
    cdf <- cumsum(area)

    if(normalize){
        cdf <- cdf / cdf[N]
    }
    if(expand){
        return(list(x=c(x[1]-W[1],x,x[N-1]+W[N]), y=c(0,cdf)))
    } else {
        return(list(x=x, y=cdf[-N]))
    }
}

make_icdf <- function(foo, offset=70){
  #   density 
  denf = density(foo$LZ_price, adjust=1, n=4096)
  #   Convert to CDF
  cdf <- pdf2cdf(denf)
  #   Build data frame
  #dens = data.frame(x=denf$x, y=denf$y)
  #   Build data frame
  cdf <- data.frame(x=denf$x, y=cdf$y)
  #   Spline fit function
  q <- splinefun(cdf$y, cdf$x, method="monoH.FC")
  #   Output points
  probs <- seq(0,1,0.001)
  #   Invert CDF
  icdf <- as_tibble(cbind(Price=q(probs)-offset, Prob=probs))
  return(icdf)
}

```

```{r non-parametric fitting}

#     Test the process on two end-members

foo_a <- foo %>%  filter(Hour==16) %>% filter(Month=="Aug") 
foo_b <- foo %>%  filter(Hour==04) %>% filter(Month=="Aug")

offset <- 70

######    4 PM
# Kernel density estimate

#     Sensitivity of fit to different parameters
dens <- NULL
for (adjust in seq(0.3,2,0.1)) {
  denf_a = density(foo_a$LZ_price, adjust=adjust, n=4096)
  dens = rbind(dens, data.frame(x=denf_a$x, y=denf_a$y, adjust=adjust))
}
  
  foo_a %>% ggplot(aes(x=LZ_price))+
  geom_histogram(aes(y=..density..),# Histogram with density instead of count on y-axis
                   binwidth=2,
                   colour="black", fill="white") +
  geom_line(data=dens, aes(x=x, y=y, color=factor(adjust), group=adjust))+
  xlim(0,200)+
  labs(title="August at 4PM - asymmetric dist",
       subtitle="Density Histogram and Fit")

dens <- NULL
for (n in seq(512,20000,512)) {
  denf_a = density(foo_a$LZ_price, adjust=1, n=n)
  dens = rbind(dens, data.frame(x=denf_a$x, y=denf_a$y, n=n))
}
  
  foo_a %>% ggplot(aes(x=LZ_price))+
  geom_histogram(aes(y=..density..),# Histogram with density instead of count on y-axis
                   binwidth=2,
                   colour="black", fill="white") +
  geom_line(data=dens, aes(x=x, y=y, color=factor(n), group=n))+
  xlim(0,200)+
  labs(title="August at 4PM - asymmetric dist",
       subtitle="Density Histogram and Fit")  
###########################################################

denf_a = density(foo_a$LZ_price, adjust=1, n=4096)

cdf <- pdf2cdf(denf_a)
dens_a = data.frame(x=denf_a$x, y=denf_a$y)
cdf <- data.frame(x=denf_a$x, y=cdf$y)
q <- splinefun(cdf$y, cdf$x, method="monoH.FC")
probs <- seq(0,1,0.001)
icdf <- as_tibble(cbind(Price=q(probs)-offset, Prob=probs))

p1 <- icdf %>% 
  ggplot(aes(x=Price, y=Prob))+
  geom_line()+
  geom_line(data=dens_a, aes(x=x-offset, y=y), color="red")+
  labs(title="CDF and Density",
       subtitle="4 PM asymmetric dist")
  
p2 <- foo_a %>% ggplot(aes(x=LZ_price-offset))+
  geom_histogram(aes(y=..density..),# Histogram with density instead of count on y-axis
                   binwidth=5,
                   colour="black", fill="white") +
  geom_density(color="blue", size=2)+
  geom_line(data=dens_a, aes(x=x-offset, y=y), color="red")+
  labs(title="August at 4PM - asymmetric dist",
       subtitle="Density Histogram and Fit")

p3 <- as_tibble(sample(icdf$Price, size=1000, replace=TRUE)) %>% 
  rename(Price=value) %>% 
  ggplot()+
  geom_histogram(aes(x=Price, y=..density..),
                   binwidth=5,
                   colour="black", fill="white") +
  geom_line(data=dens_a, aes(x=x-offset, y=y), color="red")+
  labs(title="August at 4PM - asymmetric dist",
       subtitle="Histogram of inverse cdf and Density fit")

p1 + p2 + p3 + patchwork::plot_layout(ncol=3)

######    4 AM
########################
denf_b = density(foo_b$LZ_price, adjust=1, n=4096)

cdf <- pdf2cdf(denf_b)
dens_b = data.frame(x=denf_b$x, y=denf_b$y)
cdf <- data.frame(x=denf_b$x, y=cdf$y)
q <- splinefun(cdf$y, cdf$x, method="monoH.FC")
probs <- seq(0,1,0.001)
icdf <- as_tibble(cbind(Price=q(probs)-offset, Prob=probs))

p1 <- icdf %>% 
  ggplot(aes(x=Price, y=Prob))+
  geom_line()+
  geom_line(data=dens_b, aes(x=x-offset, y=y), color="red")+
  labs(title="CDF and Density",
       subtitle="4 AM symmetric dist")
  
p2 <- foo_b %>% ggplot(aes(x=LZ_price-offset))+
  geom_histogram(aes(y=..density..),# Histogram with density instead of count on y-axis
                   binwidth=5,
                   colour="black", fill="white") +
  geom_density(color="blue", size=2)+
  geom_line(data=dens_b, aes(x=x-offset, y=y), color="red")+
  labs(title="August at 4AM - symmetric dist",
       subtitle="Density Histogram and Fit")

p3 <- as_tibble(sample(icdf$Price, size=1000, replace=TRUE)) %>% 
  rename(Price=value) %>% 
  ggplot()+
  geom_histogram(aes(x=Price, y=..density..),
                   binwidth=5,
                   colour="black", fill="white") +
  geom_line(data=dens_b, aes(x=x-offset, y=y), color="red")+
  labs(title="August at 4AM - symmetric dist",
       subtitle="Histogram of inverse cdf and Density fit")

p1 + p2 + p3 + patchwork::plot_layout(ncol=3)

#   Hourly stats

df_Hourly <- df %>%
  group_by(Hour) %>%
     summarise(Mean_price=mean(LZ_price, na.rm=TRUE),
               Median_price=median(LZ_price)+Mean_price,
               Std_dev=sd(LZ_price)+Mean_price) %>%
  mutate(Twosigma=2*Std_dev) %>%
  pivot_longer(!Hour, names_to="Statistic", values_to="Statistics")

df_sumHour <- df %>% 
  mutate(Hourd=paste0(stringr::str_pad(Hour,2,"left","0"), ":00")) %>% 
  mutate(Statistic=NA, Statistics=LZ_price) 

df_Hourly %>%
  mutate(Hour=paste0(stringr::str_pad(Hour,2,"left","0"), ":00")) %>% 
  ggplot(aes(x=Hour, y=Statistics, group=Statistic, color=Statistic)) +
  scale_x_discrete(breaks=c("00:00", "04:00", "08:00", "12:00",
                            "16:00", "20:00", "24:00"))+ 
  geom_point(data=df_sumHour, aes(x=Hourd, y=Statistics))+
  geom_line()+
  scale_y_continuous(labels=scales::dollar_format(), limits = c(-100, 6000))+
  labs(title="ERCoT Price Data at Houston Load Zone",
       subtitle="2014 to 2022",
       x="Hour of Day",
       y="Dollars per mWh")


```

# Build all distributions

Build distributions by hour and by month

```{r build all}

output <- NULL
for (month in month.abb){
  for (hour in 0:23){
    print(paste(month, hour))
    foobar <- foo %>% filter(Hour==hour) %>% filter(Month==month)
    icdf <- make_icdf(foobar, offset=70)
    icdf <- icdf %>% mutate(Month=month, Hour=hour)
    output <- rbind(output, icdf)
  }
}

saveRDS(output, paste0(path, "ICDF_Month_Hour.rds"))

```
