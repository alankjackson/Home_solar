---
title: "Build Home Model 2"
author: "Alan Jackson"
format: html
editor: visual
---

## Build a Home model

Home will be a function of Temperature, vacation, and time of day

```{r initialize}

library(tidyverse)
library(lubridate)
library(scales)
library(gt)

path <- "/home/ajackson/Dropbox/Rprojects/Tulane_Solar/Data/"

tz <- "America/Chicago"

Smart <- readRDS(paste0(path, "Smart.rds"))
Vaca <- readRDS(paste0(path, "Vacation.rds"))
Weather <- readRDS(paste0(path, "Weather.rds")) %>% 
  filter(Date>lubridate::mdy_hms("01-01-2021T00:00:00")) %>% 
  filter(!is.na(Temperature))
Solar_old <- readRDS(paste0(path, "Solar_old.rds"))
Solar_new <- readRDS(paste0(path, "Solar_new.rds"))

Solar_old <- Solar_old %>% #    Clean up old data and calc Max values by time
  # filter(Solar_W<6000) %>% 
  mutate(behind=lag(Solar_W, default=0)) %>% 
  mutate(kW = Solar_W/1000) %>% 
  rowwise() %>% 
    mutate(kWh=mean(Solar_W, behind)/4000) %>% 
  # mutate(kWh=(0.25*(min(Solar_W, behind)) + 
  #            0.125*(abs(Solar_W-behind)))/1000) %>% 
  ungroup() %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + trunc(minute(Timestamp)/15)*0.25) %>% 
  mutate(Month=month(Timestamp), Day=day(Timestamp)) 


Solar_new <- Solar_new %>% 
  mutate(Hour=hour(Timestamp) + trunc(minute(Timestamp)/15)*0.25) %>% 
  group_by(date(Timestamp), Hour) %>% #    Convert to 15 minute kWh
    summarize(Timestamp=first(Timestamp),
              SolarkWh=mean(Solar_W)/4000,
              SolarkW=sum(Solar_W)/1000,
              BatterykWh=mean(Battery_W)/4000,
              BatterykW=sum(Battery_W)/1000,
              GridkWh=mean(Grid_W)/4000,
              GridkW=sum(Grid_W)/1000) %>% 
  ungroup() %>% 
  select(-`date(Timestamp)`) %>% 
  mutate(HomekWh = GridkWh + SolarkWh + BatterykWh) %>% 
  mutate(HomekW = GridkW + SolarkW + BatterykW)


Smart <- Smart %>% 
  mutate(Usage=Consumption - Generation) %>% 
  filter(!is.na(Usage)) %>% 
  mutate(Vacation=if_else(lubridate::as_date(Date) %in% Vaca, TRUE, FALSE))

```

## Clean up Weather data

All I need is temperature every 15 minutes

```{r weather}

xout <- seq(mdy_hm("01-01-2021T00:00", tz="UTC"),
            mdy_hm("02-19-2023T00:00", tz="UTC"),
            by=15*60)

Weather_T <- approx(Weather$Date, Weather$Temperature, xout=xout, rule=2)
Weather_D <- approx(Weather$Date, Weather$Dewpoint, xout=xout, rule=2)

Weather_trp <- as_tibble(bind_cols(Date=Weather_T$x, 
                    Temperature=Weather_T$y,
                    Dewpoint=Weather_D$y))

```

## Using only the new data, estimated various home usage components

Get estimates for base (night, morning, and evening), A/C peak and cycle length, Car draw, and perhaps A/C frequency vs Temperature

Don't forget to use most recent data that has fan turned off.

```{r base}

Solar_new %>% 
  filter(date(Timestamp) >= mdy("1-1-2023")) %>%
  filter(date(Timestamp) < mdy("2-14-2023")) %>%
  filter(HomekWh<1.6) %>% # remove car charging
  ggplot(aes(x=Timestamp, y=HomekWh))+
  geom_point(size=0.1) +
  labs(title="January New Data with Car Charging Removed")

xform <- 200 # convert degrees F to kWh
Temperature <- 
  Weather_trp %>% 
  filter(date(Date) >= mdy("1-1-2023")) %>%
  filter(Date < mdy_hm("2-14-2023 12:00")) %>%
  rename(Timestamp=Date)

Solar_new %>% 
  filter(date(Timestamp) >= mdy("1-1-2023")) %>%
  filter(date(Timestamp) < mdy("2-14-2023")) %>%
  filter(HomekWh<0.4) %>% # remove car charging
  mutate(Vacation=if_else(lubridate::as_date(Timestamp) %in% Vaca, TRUE, FALSE)) %>% 
  ggplot(aes(x=Timestamp, y=HomekWh, color=Vacation))+
  geom_point(size=0.1) +
  geom_line(data=Temperature, aes(x=Timestamp, y=Temperature/xform), color="red") +
  scale_y_continuous(
    name = "kWh",
    sec.axis = sec_axis(~.*xform, name="Temperature (deg F)")
  )+
  labs(title="January New Data with Car Charging Removed")

Solar_new %>% 
  filter(date(Timestamp) >= mdy("1-1-2023")) %>%
  filter(date(Timestamp) < mdy("2-14-2023")) %>%
  filter(HomekWh<0.4) %>% # remove car charging
  left_join(., Temperature, by="Timestamp") %>% 
  mutate(Vacation=if_else(lubridate::as_date(Timestamp) %in% Vaca, TRUE, FALSE)) %>% 
  filter(!Vacation) %>% 
  group_by(date(Timestamp)) %>% 
     summarise(kWh=sum(HomekWh, na.rm = TRUE),
               AvgT = mean(Temperature, na.rm=TRUE)) %>% 
  ggplot(aes(y=AvgT, x=kWh))+
  geom_point() +
  geom_smooth(method="lm")

#####  Break up by time of day

foo <- 
Solar_new %>% 
  filter(date(Timestamp) >= mdy("1-1-2023")) %>%
  filter(date(Timestamp) < mdy("2-14-2023")) %>%
  left_join(., Temperature, by="Timestamp") %>% 
  mutate(ToD = case_when(
    Hour <= 6 | Hour >= 19 ~ "Night",
    between(Hour, 16, 19) ~ "Eve",
    TRUE ~ "Day"
  )) %>% 
  filter(HomekWh<0.4) %>% # remove car charging
  mutate(Vacation=if_else(lubridate::as_date(Timestamp) %in% Vaca, TRUE, FALSE))

foo %>% 
  group_by(date(Timestamp), ToD) %>% 
  filter(!Vacation) %>% 
     summarise(kWh=sum(HomekWh, na.rm = TRUE),
               # Vacation=last(Vacation),
               AvgT = mean(Temperature, na.rm=TRUE)) %>% 
  ggplot(aes(y=AvgT, x=kWh, group=ToD, color=ToD))+
  geom_point() +
  # geom_point(aes(color=Vacation))+
  geom_smooth(method="lm")
  

```

## Repeat analysis with the old data

```{r old}

Solar_old %>% 
  left_join(., Smart, by=c(Timestamp="Date")) %>% 
  mutate(HomekWh= kWh-Generation + Consumption) %>% 
  filter(date(Timestamp) < mdy("2-1-2022")) %>%
  filter(date(Timestamp) > mdy("12-31-2021")) %>%
  ggplot(aes(x=Timestamp, y=HomekWh))+
  geom_point(size=0.1) +
  labs(title="Old Data Jan 2022")

Solar_old %>% 
  left_join(., Smart, by=c(Timestamp="Date")) %>% 
  mutate(HomekWh= kWh-Generation + Consumption) %>% 
  filter(date(Timestamp) < mdy("3-1-2022")) %>%
  filter(date(Timestamp) > mdy("1-31-2022")) %>%
  ggplot(aes(x=Timestamp, y=HomekWh))+
  geom_point(size=0.1) +
  labs(title="Old Data Feb 2022")

Solar_old %>% 
  left_join(., Smart, by=c(Timestamp="Date")) %>% 
  mutate(HomekWh= kWh-Generation + Consumption) %>% 
  filter(date(Timestamp) < mdy("7-1-2022")) %>%
  filter(date(Timestamp) > mdy("5-31-2022")) %>%
  ggplot(aes(x=Timestamp, y=HomekWh))+
  geom_point(size=0.1) +
  labs(title="Old Data June 2022")

Solar_old %>% 
  left_join(., Smart, by=c(Timestamp="Date")) %>% 
  mutate(HomekWh= kWh-Generation + Consumption) %>% 
  filter(date(Timestamp) < mdy("6-21-2022")) %>%
  filter(date(Timestamp) > mdy("6-14-2022")) %>%
  ggplot(aes(x=Timestamp, y=HomekWh))+
  geom_point(size=0.1) +
  geom_line()+
  labs(title="Old Data June 2022")

foo2 <- 
Solar_old %>% 
  left_join(., Smart, by=c(Timestamp="Date")) %>% 
  mutate(HomekWh= kWh-Generation + Consumption) %>% 
  filter(date(Timestamp) < mdy("11-1-2022")) %>%
  filter(HomekWh>0.0) %>%  # remove negatives
  filter(HomekWh<1.0) # remove car charging
  
foo2 %>% 
  ggplot(aes(x=Timestamp, y=HomekWh))+
  geom_point(size=0.1) +
  labs(title="Old Data with Car Charging Removed")

xform <- 100 # convert degrees F to kWh
Temperature <- 
  Weather_trp %>% 
  filter(date(Date) >= mdy("1-1-2021")) %>%
  filter(Date < mdy_hm("11-1-2022 12:00")) %>%
  rename(Timestamp=Date)

foo2 %>% 
  ggplot(aes(x=Timestamp, y=HomekWh, color=Vacation))+
  geom_point(size=0.1) +
  geom_line(data=Temperature, aes(x=Timestamp, y=Temperature/xform), color="red") +
  scale_y_continuous(
    name = "kWh",
    sec.axis = sec_axis(~.*xform, name="Temperature (deg F)")
  )+
  labs(title="Old Data with Car Charging Removed")

foo2 %>% 
  left_join(., Temperature, by="Timestamp") %>% 
  group_by(date(Timestamp)) %>% 
     summarise(kWh=sum(HomekWh, na.rm = TRUE),
               AvgT = mean(Temperature, na.rm=TRUE)) %>% 
  ggplot(aes(x=AvgT, y=kWh))+
  geom_point() +
  geom_smooth(method="lm")+
  labs(title="All the data")

#####  Break up by time of day

foo2 <- foo2 %>% 
  left_join(., Temperature, by="Timestamp") %>% 
  mutate(ToD = case_when(
    Hour <= 6 | Hour >= 19 ~ "Night",
    between(Hour, 16, 19) ~ "Eve",
    TRUE ~ "Day"
  ))  

# Vacation sums
foo_sum_v <- foo2 %>% 
  group_by(date(Timestamp), ToD) %>% 
  filter(Vacation) %>% 
     summarise(kWh=mean(HomekWh, na.rm = TRUE),
               AvgD = mean(Dewpoint, na.rm=TRUE),  
               AvgT = mean(Temperature, na.rm=TRUE)) %>%  
  mutate(Temp = case_when(
    AvgT <= 60 ~ "Cold",
    between(AvgT, 60, 70) ~ "Cool",
    between(AvgT, 70, 80) ~ "Warm",
    between(AvgT, 80, 90) ~ "Hot",
    TRUE ~ "Hell"
  )) %>% 
  mutate(Temp=factor(Temp,
                     levels=c("Cold", "Cool", "Warm", "Hot", "Hell"))) %>% 
  mutate(Status="Vacation")

#   Occupied sums
foo_sum_o <- foo2 %>% 
  group_by(date(Timestamp), ToD) %>% 
  filter(!Vacation) %>% 
     summarise(kWh=mean(HomekWh, na.rm = TRUE),
               AvgD = mean(Dewpoint, na.rm=TRUE),  
               AvgT = mean(Temperature, na.rm=TRUE)) %>%  
  mutate(Temp = case_when(
    AvgT <= 60 ~ "Cold",
    between(AvgT, 60, 70) ~ "Cool",
    between(AvgT, 70, 80) ~ "Warm",
    between(AvgT, 80, 90) ~ "Hot",
    TRUE ~ "Hell"
  )) %>% 
  mutate(Temp=factor(Temp,
                     levels=c("Cold", "Cool", "Warm", "Hot", "Hell"))) %>% 
  mutate(Status="Occupied")

rbind(foo_sum_v, foo_sum_o) %>% 
  ggplot(aes(x=kWh, y=ToD, fill=stat(x)))+
  ggridges::geom_density_ridges_gradient()+
  scale_fill_viridis_c(name = "Kilowatt-hours", option = "C")+
  facet_wrap(vars(Status)) +
  labs(title="Power Usage by Times")

foo_sum_v %>% 
  ggplot(aes(x=kWh, y=ToD, fill=stat(x)))+
  ggridges::geom_density_ridges_gradient()+
  scale_fill_viridis_c(name = "Kilowatt-hours", option = "C")+
  labs(title="Vacation times")

foo_sum_o %>% 
  ggplot(aes(x=kWh, y=ToD, fill=stat(x)))+
  ggridges::geom_density_ridges_gradient()+
  scale_fill_viridis_c(name = "Kilowatt-hours", option = "C")+
  labs(title="Occupied times")

rbind(foo_sum_v, foo_sum_o) %>% 
  ggplot(aes(x=kWh, y=Temp, fill=stat(x)))+
  ggridges::geom_density_ridges_gradient()+
  scale_fill_viridis_c(name = "Kilowatt-hours", option = "C")+
  facet_wrap(vars(Status)) +
  labs(title="Home power usage, outside temperature in 10 degree increments")

rbind(foo_sum_v, foo_sum_o) %>% 
  ggplot(aes(x=kWh, y=Temp, fill=stat(x)))+
  ggridges::geom_density_ridges_gradient()+
  scale_fill_viridis_c(name = "Kilowatt-hours", option = "C")+
  facet_wrap(vars(Status, ToD)) +
  labs(title="Home power usage, Time of Day, Vacation, and Average Temperature")
  
foo_sum_v %>% 
  ggplot(aes(x=kWh, y=Temp, fill=stat(x)))+
  ggridges::geom_density_ridges_gradient()+
  scale_fill_viridis_c(name = "Kilowatt-hours", option = "C")+
  labs(title="Vacation Home power usage, outside temperature in 10 degree increments")
  
foo_sum_o %>% 
  ggplot(aes(x=kWh, y=Temp, fill=stat(x)))+
  ggridges::geom_density_ridges_gradient()+
  scale_fill_viridis_c(name = "Kilowatt-hours", option = "C")+
  labs(title="Occupied Home power usage, outside temperature in 10 degree increments")
  

foo_sum_o %>% 
  ggplot(aes(x=AvgT, y=kWh, group=ToD, color=ToD))+
  geom_point() +
  geom_smooth(method="lm")+
  labs(title="House occupied")

foo_sum_v %>% 
  ggplot(aes(x=AvgT, y=kWh, group=ToD, color=ToD))+
  geom_point() +
  geom_smooth(method="lm")+
  labs(title="Vacation")
  
rbind(foo_sum_v, foo_sum_o) %>% 
  ggplot(aes(x=AvgT, y=kWh, group=ToD, color=ToD))+
  geom_point() +
  geom_smooth(method="lm")+
  labs(title="All data")

foo_sum_o %>% 
  ggplot(aes(x=AvgD, y=kWh, group=ToD, color=ToD))+
  geom_point() +
  geom_smooth(method="lm")+
  labs(title="House occupied")

foo_sum_v %>% 
  ggplot(aes(x=AvgD, y=kWh, group=ToD, color=ToD))+
  geom_point() +
  geom_smooth(method="lm")+
  labs(title="Vacation")
  
rbind(foo_sum_v, foo_sum_o) %>% 
  ggplot(aes(x=AvgD, y=kWh, group=ToD, color=ToD))+
  geom_point() +
  geom_smooth(method="lm")+
  labs(title="All data")

```

## Build distributions

```{r functions}

#   https://rdrr.io/github/sethmcg/climod/src/R/pdf2cdf.R
pdf2cdf <- function(p, x=NULL, normalize=TRUE, expand=FALSE){
    if(is.null(x)) {
        if(is.atomic(p)){
            y <- p
            x <- seq(length(y))
        } else {
            stopifnot(exists("x", where=p) && exists("y", where=p))
            y <- p$y
            x <- p$x
        }
    } else {
        stopifnot(is.atomic(p) && is.atomic(x))
        y <- p
    }
    
    stopifnot(length(x)==length(y))
    stopifnot(length(x) > 2)
    stopifnot(all(is.finite(x)))
    stopifnot(all(is.finite(y)))
    stopifnot(all(diff(x) > 0))

    if(any(y < 0)){
        y[y < 0] <- 0
    }
    
    ## trapezoids: N = no., L = left height, R = right height, W = width
    N <- length(y) + 1
    L <- c(0,y)
    R <- c(y,0)
    W <- diff(x)
    W <- c(W[1], W, W[N-2])
    area <- W * (L + R) / 2
    cdf <- cumsum(area)

    if(normalize){
        cdf <- cdf / cdf[N]
    }
    if(expand){
        return(list(x=c(x[1]-W[1],x,x[N-1]+W[N]), y=c(0,cdf)))
    } else {
        return(list(x=x, y=cdf[-N]))
    }
}


make_icdf <- function(foo, offset=0){
  #   density 
  denf = density(foo$kWh, adjust=1, n=1024)
  #   Convert to CDF
  cdf <- pdf2cdf(denf)
  #   Build data frame
  #dens = data.frame(x=denf$x, y=denf$y)
  #   Build data frame
  cdf <- data.frame(x=denf$x, y=cdf$y)
  #   Spline fit function
  q <- splinefun(cdf$y, cdf$x, method="monoH.FC")
  #   Output points
  probs <- seq(0,1,0.001)
  #   Invert CDF
  icdf <- as_tibble(cbind(kWh=q(probs)-offset, Prob=probs))
  return(icdf)
}


```

## Distributions

```{r distributions}

foo_sum <- rbind(foo_sum_v, foo_sum_o)

foobar <- foo_sum %>% filter(Status=="Occupied") %>% 
                    filter(ToD=="Day") %>% 
                    filter(Temp=="Hot")

icdf <- make_icdf(foobar, offset=0)

icdf %>% 
  ggplot(aes(x=kWh, y=Prob)) +
  geom_line()+
  geom_point()

# Build all distributions

output <- NULL
for (Temp in c("Cold", "Cool", "Warm", "Hot", "Hell")){
  for (ToD in c("Night", "Day", "Eve")){
    for (Status in c("Occupied", "Vacation")){
      print(paste(Temp, ToD, Status))
      CalcTemp <- case_when(
        Temp == "Hell" & Status == "Occupied" ~ "Hot",
        Temp == "Cold" & Status == "Vacation" & ToD!="Night" ~ "Cool",
        TRUE ~ Temp 
      )
      print(paste(CalcTemp, ToD, Status))
      foobar <- foo_sum %>% filter(Status==Status) %>% 
                            filter(ToD==ToD) %>% 
                            filter(Temp==CalcTemp)
      icdf <- make_icdf(foobar, offset=0)
      icdf <- icdf %>% mutate(Temp=Temp, ToD=ToD, Status=Status)
      output <- rbind(output, icdf)
    }
  }
}

output %>% 
  ggplot(aes(x=kWh, y=Prob)) +
  geom_line() +
  facet_wrap(vars(Temp, ToD, Status))

saveRDS(output, paste0(path, "ICDF_HomePower_Vac_Temp_ToD.rds"))

```

## Build Car model using new data only

```{r car}

Solar_new %>% 
  filter(date(Timestamp) >= mdy("1-9-2023")) %>%
  filter(date(Timestamp) < mdy("2-15-2023")) %>%
  filter(Hour<6) %>% 
  # filter(HomekWh>1.6) %>% # remove car charging
  ggplot(aes(x=Timestamp, y=HomekWh))+
  geom_point() +
  geom_line()+
  labs(title="Jan & Feb New Data Car Charging")

ExpFunc <- as_tibble(bind_cols(y=dexp(seq(0,23.75, 0.25))*1.7, 
                               x=seq(0,23.75, 0.25)))

Solar_new %>% 
  filter(date(Timestamp) >= mdy("1-9-2023")) %>%
  filter(date(Timestamp) < mdy("2-15-2023")) %>%
  # filter(Hour<5) %>%
  # filter(HomekWh>1.6) %>% # remove car charging
  group_by(Hour) %>% 
    summarize(Car=mean(HomekWh)-0.1) %>% # 0.1 is the base value 
  ggplot(aes(x=Hour, y=Car))+
  geom_point() +
  geom_line()+
  geom_line(data=ExpFunc, aes(x=x, y=y), color="red") + 
  labs(title="Jan & Feb New Data Car Charging")

```
