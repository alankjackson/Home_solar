---
title: "Build Home Model"
author: "Alan Jackson"
format: html
editor: visual
---

## Build a Home model

Home will be a function of Temperature, vacation, and time of day

```{r initialize}

library(tidyverse)
library(lubridate)
library(scales)
library(gt)

path <- "/home/ajackson/Dropbox/Rprojects/Tulane_Solar/Data/"

tz <- "America/Chicago"

df <- readRDS(paste0(path, "Smart.rds"))
Vaca <- readRDS(paste0(path, "Vacation.rds"))
Weather <- readRDS(paste0(path, "Weather.rds")) %>% 
  filter(Date>lubridate::mdy_hms("01-01-2021T00:00:00")) %>% 
  filter(!is.na(Temperature))
Solar_old <- readRDS(paste0(path, "Solar_old.rds"))
Solar_new <- readRDS(paste0(path, "Solar_new.rds"))

Solar_old <- Solar_old %>% #    Clean up old data and calc Max values by time
  # filter(Solar_W<6000) %>% 
  mutate(behind=lag(Solar_W, default=0)) %>% 
  mutate(kW = Solar_W/1000) %>% 
  rowwise() %>% 
    mutate(kWh=mean(Solar_W, behind)/4000) %>% 
  # mutate(kWh=(0.25*(min(Solar_W, behind)) + 
  #            0.125*(abs(Solar_W-behind)))/1000) %>% 
  ungroup() %>% 
  mutate(Date=date(Timestamp)) %>%
  mutate(Hour=hour(Timestamp) + trunc(minute(Timestamp)/15)*0.25) %>% 
  mutate(Month=month(Timestamp), Day=day(Timestamp)) 


Solar_new <- Solar_new %>% 
  mutate(Hour=hour(Timestamp) + trunc(minute(Timestamp)/15)*0.25) %>% 
  group_by(date(Timestamp), Hour) %>% #    Convert to 15 minute kWh
    summarize(Timestamp=first(Timestamp),
              SolarkWh=mean(Solar_W)/1000,
              SolarkW=sum(Solar_W)/1000,
              BatterykWh=mean(Battery_W)/1000,
              BatterykW=sum(Battery_W)/1000,
              GridkWh=mean(Grid_W)/1000,
              GridkW=sum(Grid_W)/1000) %>% 
  ungroup() %>% 
  select(-`date(Timestamp)`) %>% 
  mutate(HomekWh = GridkWh + SolarkWh + BatterykWh) %>% 
  mutate(HomekW = GridkW + SolarkW + BatterykW)


df2 <- df %>% 
  mutate(Usage=Consumption - Generation) %>% 
  filter(!is.na(Usage)) %>% 
  mutate(Vacation=if_else(lubridate::as_date(Date) %in% Vaca, TRUE, FALSE))

```

## Clean up Weather data

All I need is temperature every 15 minutes

```{r weather}

tz <- "America/Chicago"

xout <- seq(mdy_hm("01-01-2021T00:00", tz="UTC"),
            mdy_hm("12-31-2022T00:00", tz="UTC"),
            by=15*60)

Weather_T <- approx(Weather$Date, Weather$Temperature, xout=xout, rule=2)

Weather_trp <- as_tibble(bind_cols(Date=Weather_T$x, 
                    Temperature=Weather_T$y))

```

##        Combine Smartmeter and Solar to get Home

Problems. Solar output is instantaneous, so it can be briefly shaded in any 15
minute period leading to an anomalously small output value, but the smart meter
data is the integrated kWh value.

So drop any day with negative values for the Home, and apply a smoother to the
rest?

```{r make home}

foo <- df2 %>% 
  select(Date, Usage, Vacation, Generation, Consumption) %>% 
  # mutate(Date=Date+minutes(60)) %>%
  inner_join(., Solar_old, by=c("Date"="Timestamp")) %>% 
  select(Date, Usage, Generation, Consumption, Vacation, Solar_W, kWh, Hour, Month) %>% 
  mutate(Home=kWh + Usage) %>% 
  filter(Home<0) %>% 
  group_by(Month) %>% 
    tally()

foo %>% 
  ggplot(aes(x=Month, y=n))+
  geom_point()

df <- df2 %>% 
  select(Date, Usage, Vacation, Generation, Consumption) %>% 
  mutate(TDate=force_tz(Date, tz=tz)) %>% 
  mutate(DST=dst(TDate)) %>% 
  # mutate(Date=if_else(dst(TDate), Date+minutes(60), Date)) %>%
  inner_join(., Solar_old, by=c("Date"="Timestamp")) %>% 
  select(Date, Usage, Generation, Consumption, Vacation, Solar_W, kWh, Hour, Month) %>% 
  mutate(Home=kWh + Usage)  

df3 <- df %>% 
  filter(kWh>0, Generation>0) 
  
df %>% 
  filter(kWh>0, Generation>0) %>%
  ggplot(aes(x=Generation, y=kWh))+
  geom_point(size=0.1)+
  geom_smooth(method="lm") +
  annotate("text",x=1,y=0.5,label=(paste0("slope==",coef(lm(df3$kWh~df3$Generation))[2])),parse=TRUE)+
  annotate("text",x=1,y=0.45,label=(paste0("intercept==",coef(lm(df3$kWh~df3$Generation))[1])),parse=TRUE)
  
df %>% 
  filter(kWh>0) %>% 
  ggplot(aes(y=Home, x=kWh))+
  geom_point(size=0.1)+
  geom_smooth(method="lm") +
  annotate("text",y=3.2,x=1,label=(paste0("slope==",coef(lm(df$Home~df$kWh))[2])),color="red",parse=TRUE)+
  annotate("text",y=3,x=1,label=(paste0("intercept==",coef(lm(df$Home~df$kWh))[1])),color="red",parse=TRUE)

df %>% 
  filter(kWh>0, Generation>0) %>% 
  ggplot(aes(x=Home))+
  geom_histogram()
  

df %>% 
  ggplot(aes(x=Solar_W, y=Usage)) +
  geom_point(size=0.1)

df %>% 
  ggplot(aes(x=Date, y=Home)) +
  geom_point(size=0.1) +
  geom_smooth()

df %>% 
  filter(Date>mdy_hm("03-10-2021 00:00") & Date<mdy_hm("03-31-2021 00:00")) %>% 
  ggplot(aes(x=Date, y=Home)) +
  geom_point(size=0.1)

df %>% 
  filter(Date>mdy_hm("03-10-2021 00:00") & Date<mdy_hm("03-31-2021 00:00")) %>% 
  ggplot(aes(x=Date, y=Home)) +
  geom_point(size=0.1)+
  geom_point(aes(y=Usage, color="red"), size=0.1)

# Drop under zero days

dfz <- df %>%
  mutate(Day=date(Date)) %>% 
  group_by(Day) %>% 
     mutate(Zero=min(Home)) %>% 
  ungroup() %>% 
  filter(Zero>0) %>% 
  select(-Zero, -Day)

dfz %>% 
  ggplot(aes(x=Date, y=Home)) +
  geom_point(size=0.1) +
  geom_smooth()

foo <- dfz %>%
  mutate(SmHome=runmed(Home, 5))

foo %>% 
  filter(Date>mdy_hm("03-10-2021 00:00") & Date<mdy_hm("03-31-2021 00:00")) %>% 
  ggplot(aes(x=Date, y=Home)) +
  geom_line()+
  geom_line(aes(y=SmHome), color="red")

```

## New strategy

Let's build full month averages by time interval for all the quantities, and
then try subtracting...

```{r month averages}
library(DescTools)

dfavg <- df %>% 
  group_by(Month, Hour) %>% 
     summarize(UsageA=mean(Usage, na.rm=TRUE),
               UsageM=median(Usage, na.rm=TRUE),
               UsageW=mean(Winsorize(Usage, na.rm=TRUE)),
               kWhA=mean(kWh, na.rm=TRUE),
               kWhM=median(kWh, na.rm=TRUE),
               kWhW=mean(Winsorize(kWh, na.rm=TRUE)),
               ConsumptionA=mean(Consumption, na.rm=TRUE),
               ConsumptionM=median(Consumption, na.rm=TRUE),
               ConsumptionW=mean(Winsorize(Consumption, na.rm=TRUE)),
               GenerationA=mean(Generation, na.rm=TRUE),
               GenerationM=median(Generation, na.rm=TRUE),
               GenerationW=mean(Winsorize(Generation, na.rm=TRUE)),
               .groups="drop"
               ) %>% 
  mutate(HomeA=kWhA+UsageA, HomeM=kWhM+UsageM, HomeW=kWhW+UsageW)# %>% 
  # filter(kWhM>0)
  
dfavg %>% 
  filter(kWhA>0) %>% 
  ggplot(aes(y=HomeA, x=kWhA))+
  geom_point(size=0.1)+
  geom_smooth(method="lm") +
  annotate("text",y=1.1,x=0.5,label=(paste0("slope==",coef(lm(dfavg$HomeA~dfavg$kWhA))[2])),color="red",parse=TRUE)+
  annotate("text",y=1.0,x=0.5,label=(paste0("intercept==",coef(lm(dfavg$HomeA~dfavg$kWhA))[1])),color="red",parse=TRUE)

dfavg %>% 
  filter(kWhM>0) %>% 
  ggplot(aes(y=HomeM, x=kWhM))+
  geom_point(size=0.1)+
  geom_smooth(method="lm") +
  annotate("text",y=1.1,x=0.5,label=(paste0("slope==",coef(lm(dfavg$HomeM~dfavg$kWhM))[2])),color="red",parse=TRUE)+
  annotate("text",y=1.0,x=0.5,label=(paste0("intercept==",coef(lm(dfavg$HomeM~dfavg$kWhM))[1])),color="red",parse=TRUE)

dfavg %>% 
 # filter(kWhW>0) %>% 
  ggplot(aes(y=HomeW, x=kWhW))+
  geom_point(size=0.1)+
  geom_smooth(method="lm") +
  annotate("text",y=1.1,x=0.5,label=(paste0("slope==",coef(lm(dfavg$HomeW~dfavg$kWhW))[2])),color="red",parse=TRUE)+
  annotate("text",y=1.0,x=0.5,label=(paste0("intercept==",coef(lm(dfavg$HomeW~dfavg$kWhW))[1])),color="red",parse=TRUE)
  
dfavg %>% 
  mutate(DateTime=Month*24+Hour) %>% 
  ggplot(aes(x=DateTime, y=HomeA))+
  geom_line()+
  geom_line(aes(y=HomeM), color="red")+
  geom_line(aes(y=HomeW), color="blue")
  
dfavg %>% 
  mutate(DateTime=Month*24+Hour) %>% 
  ggplot(aes(x=DateTime, y=UsageA))+
  geom_line()+
  geom_line(aes(y=UsageM), color="red")+
  geom_line(aes(y=UsageW), color="blue")

  
dfavg %>% 
  mutate(DateTime=Month*24+Hour) %>% 
  ggplot(aes(x=DateTime, y=ConsumptionA))+
  geom_line()+
  geom_line(aes(y=GenerationA), color="red") +
  geom_line(aes(y=GenerationA+ConsumptionA), color="blue")


```

















---
title: "Build Home Model" author: "Alan Jackson" format: html editor: visual
---
## Build a Home model
Home will be a function of Temperature, vacation, and time of day
```{r initialize}
# library(scales)
# path <- "/home/ajackson/Dropbox/Rprojects/Tulane_Solar/Data/"
# tz <- "America/Chicago"
# df <- readRDS(paste0(path, "Smart.rds"))
# Vaca <- readRDS(paste0(path, "Vacation.rds"))
# Weather <- readRDS(paste0(path, "Weather.rds")) %>%
#   filter(Date>lubridate::mdy_hms("01-01-2021T00:00:00")) %>%
#   filter(!is.na(Temperature))

# Solar_old <- readRDS(paste0(path, "Solar_old.rds"))
# Solar_old <- Solar_old %>% #    Clean up old data and calc Max values by time
#   filter(Solar_W<6000) %>%
#   mutate(Solar_W=Solar_W/4) %>%
#   mutate(Date=date(Timestamp)) %>%
#   mutate(Hour=hour(Timestamp) + minute(Timestamp)/15*0.25,
#          Month=month(Timestamp), Day=day(Timestamp)) 


# df2 <- df %>%
#   mutate(Usage=Consumption - Generation) %>%
#   filter(!is.na(Usage)) %>%
#   mutate(Vacation=if_else(lubridate::as_date(Date) %in% Vaca, TRUE, FALSE))
```
## Clean up Weather data
All I need is temperature every 15 minutes
```{r weather}
tz <- "America/Chicago"
xout <- seq(mdy_hm("01-01-2021T00:00", tz="UTC"),
            mdy_hm("12-31-2022T00:00", tz="UTC"),
            by=15*60)
Weather_T <- approx(Weather$Date, Weather$Temperature, xout=xout, rule=2)
Weather_trp <- as_tibble(bind_cols(Date=Weather_T$x,
                    Temperature=Weather_T$y))
```
##        Combine Smartmeter and Solar to get Home
Problems. Solar output is instantaneous, so it can be briefly shaded in any 15
minute period leading to an anomalously small output value, but the smart meter
data is the integrated kWh value.
So drop any day with negative values for the Home, and apply a smoother to the
rest?
```{r make home}
foo <- df2 %>%
  select(Date, Usage, Vacation, Generation, Consumption) %>%
  mutate(Date=Date+minutes(60)) %>%
  inner_join(., Solar_old, by=c("Date"="Timestamp")) %>%
  select(Date, Usage, Generation, Consumption, Vacation, Solar_W, Hour, Month) %>%
  mutate(Home=Solar_W*0.001 + Usage) %>%
  filter(Home<0) %>%
  group_by(Month) %>%
    tally()
foo %>%
  ggplot(aes(x=Month, y=n))+
  geom_point()
df <- df2 %>%
  select(Date, Usage, Vacation, Generation, Consumption) %>%
  mutate(Date=Date+minutes(60)) %>%
  inner_join(., Solar_old, by=c("Date"="Timestamp")) %>%
  select(Date, Usage, Generation, Consumption, Vacation, Solar_W, Hour, Month) %>%
  mutate(Home=Solar_W*0.001 + Usage)
df %>%
  ggplot(aes(x=Solar_W, y=Usage)) +
  geom_point(size=0.1)
df %>%
  ggplot(aes(x=Date, y=Home)) +
  geom_point(size=0.1) +
  geom_smooth()
df %>%
  filter(Date>mdy_hm("03-10-2021 00:00") & Date<mdy_hm("03-31-2021 00:00")) %>%
  ggplot(aes(x=Date, y=Home)) +
  geom_point(size=0.1)
df %>%
  filter(Date>mdy_hm("03-10-2021 00:00") & Date<mdy_hm("03-31-2021 00:00")) %>%
  ggplot(aes(x=Date, y=Home)) +
  geom_point(size=0.1)+
  geom_point(aes(y=Usage, color="red"), size=0.1)
foo <- df %>%
  filter(Date>mdy_hm("03-11-2021 00:00") & Date<mdy_hm("03-18-2021 00:00"))
```


##  Okay, let's look at one day to see what we can do

```{r one day}

oneday <- "01-15-2023"

df <- read_csv(paste0(path, "Smartmeter_DecJan2022-23.csv"))

df2 <- df %>% 
  select(USAGE_DATE, USAGE_START_TIME, USAGE_KWH, 
         CONSUMPTION_SURPLUSGENERATION) %>% 
  rename(Type=CONSUMPTION_SURPLUSGENERATION, 
         Date=USAGE_DATE, 
         kWh=USAGE_KWH,
         Time=USAGE_START_TIME)

#   Convert to UTC

df2 <- df2 %>% 
  filter(!is.na(kWh)) %>% 
  mutate(LDate=mdy_hms(paste(Date, Time), tz=tz)) %>% 
    mutate(DST=dst(LDate)) %>% 
    mutate(DST=dst(LDate) | dst(LDate-1)) %>% 
    mutate(UDate=mdy_hms(paste(Date, Time), tz="UTC")) %>% 
    group_by(Type, date(LDate)) %>% # this takes care of Fall transition day, almost
       mutate(ToShift=duplicated(UDate, fromLast=TRUE)) %>% 
    ungroup() %>% 
    filter(!is.na(DST)) %>% 
    mutate(NewDate=if_else(DST|ToShift, UDate-hours(1), UDate)) %>% 
    select(-LDate, -DST, -ToShift, -UDate, -`date(LDate)`)

df2 <- df2 %>% 
  pivot_wider(NewDate, names_from="Type", 
              values_from="kWh") %>% 
  select(Date=NewDate, Consumption, Generation=`Surplus Generation`) %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25)  
  # mutate(Hour=hour(Date) + minute(Date)/15*0.25)  

df2 %>% 
  filter(date(Date)==mdy(oneday)) %>% 
  ggplot(aes(x=Date, y=Consumption))+
  geom_line()+
  geom_line(aes(y=Generation), color="red") +
  labs(title="Jan 15 data, Consumption and Generation, Smartmeter data")

#   Tesla data

df <- read_csv(paste0(path, "thursJan26.csv"), col_types="cccccc") %>% 
  mutate(Date=lubridate::ymd_hms(`Date time`, tz="UTC")-hours(6)) %>% 
  rename(Home=`Home (kW)`,
         Solar=`Solar (kW)`,
         Powerwall=`Powerwall (kW)`,
         Grid=`Grid (kW)` ) %>% 
  mutate(Home=as.numeric(Home),
         Solar=as.numeric(Solar),
         Powerwall=as.numeric(Powerwall),
         Grid=as.numeric(Grid)) %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>% 
  group_by(Hour) %>% #    Convert to 15 minute kWh
    summarize(SolarkWh=mean(Solar)/4,
              HomekWh=mean(Home)/4,
              PowerkWh=mean(Powerwall)/4,
              GridkWh=mean(Grid)/4)

df %>% 
  ggplot(aes(x=Hour, y=HomekWh)) +
  geom_line()+
  geom_line(aes(y=SolarkWh), color="red")+
  labs(title="Jan 26 data, Consumption and Generation, Tesla App data")

#   Combine

#foo <- 
  df2 %>% 
  filter(date(Date)==mdy(oneday)) %>% 
  left_join(., df, by="Hour") %>% 
  mutate(GenDiff = SolarkWh - HomekWh - Generation + PowerkWh) %>% 
  mutate(HomeDiff = HomekWh - Consumption) %>% 
  mutate(UsageDiff = Consumption - Generation - HomekWh + SolarkWh + PowerkWh) %>% 
  mutate(UsageMeter = Consumption - Generation, UsageHome = HomekWh - SolarkWh - PowerkWh) %>% 
    select(Hour, Date, Consumption, Generation, UsageMeter, UsageHome, SolarkWh) %>% 
    select(-Date) %>% 
  pivot_longer(!Hour, names_to = "Calculation", values_to="Values") %>% 
  ggplot(aes(x=Hour)) +
  geom_line(aes(y=Values, color=Calculation))+
  labs(title="Jan 15 data, Consumption and Generation, Smartmeter data")


  #   Same thing with python file
 # foo <- Solar_new %>% filter(date(Timestamp)==mdy(oneday))
 foo <- Solar_new %>% filter(month(Timestamp)==1)
 foo2 <- df2 %>% filter(date(Date)==mdy(oneday))
  
  df2 %>% 
  # filter(date(Date)==mdy(oneday)) %>%
  filter(month(Date)==1) %>%
  # left_join(. ,foo , by="Hour") %>%
  left_join(. ,foo , by=c("Date"="Timestamp")) %>%
  mutate(GenDiff = SolarkWh - HomekWh - Generation + BatterykWh) %>% 
  mutate(HomeDiff = HomekWh - Consumption - BatterykWh) %>% 
  mutate(UsageDiff = Consumption - Generation - HomekWh + SolarkWh + BatterykWh) %>% 
  mutate(UsageMeter = Consumption - Generation, UsageHome = HomekWh - SolarkWh - BatterykWh) %>% 
  mutate(HomeAll = Consumption - Generation + SolarkWh + BatterykWh) %>% 
    # select(Hour, Date, Consumption, Generation, UsageMeter, UsageHome, SolarkWh) %>% 
    # select(Hour, UsageHome, SolarkWh, UsageDiff, HomeDiff, GenDiff, UsageMeter, HomeAll) %>%
    # select(Hour, UsageHome, UsageDiff, UsageMeter, HomeAll) %>%
    # select(Date, UsageHome, UsageDiff, UsageMeter, HomeAll) %>%
    select(Date, HomeAll) %>%
    # select(-Date) %>% 
  # pivot_longer(!Hour, names_to = "Calculation", values_to="Values") %>%
  pivot_longer(!Date, names_to = "Calculation", values_to="Values") %>%
  # ggplot(aes(x=Hour)) +
  ggplot(aes(x=Date)) +
  geom_line(aes(y=Values, color=Calculation))+
  labs(title="Jan data, Smartmeter data + Python data, Home Usage")

  df2 %>% 
  filter(month(Date)==1) %>%
  left_join(. ,foo , by=c("Date"="Timestamp")) %>%
  mutate(HomeAll = Consumption - Generation + SolarkWh + BatterykWh) %>% 
    select(Date, HomeAll) %>%
  # pivot_longer(!Date, names_to = "Calculation", values_to="Values") %>%
  ggplot(aes(x=HomeAll)) +
  geom_histogram(bins=80)+
  labs(title="Jan data, Smartmeter data + Python data, Home Usage")
  
  foo2 <- df2 %>% 
  filter(month(Date)==1) %>%
  left_join(. ,foo , by=c("Date"="Timestamp")) %>%
  mutate(HomeAll = Consumption - Generation + SolarkWh + BatterykWh) %>% 
    select(Date, HomeAll) %>% 
    filter(!is.na(HomeAll))
  
  km <- kmeans(foo2$HomeAll, centers = 4)
foo2$km <- as.character(km$cluster)

ggplot(foo2, aes(x = HomeAll, fill = km)) +
  geom_histogram(bins = 120)+
  labs(title="Jan data, Smartmeter data + Python data, Home Usage, kmeans cluster")
  

#     Calculate loads for base, afternoon, a/c, and cars

#     For base look at 1 AM - 6 AM, 9 PM - 12 PM

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter((Hour>1 & Hour < 6) | (Hour>21 & Hour<24)) %>% 
  filter(HomeAll<1) %>% 
  ggplot(aes(x=Hour, y=HomeAll)) +
  geom_point()+
  labs(title="Jan data, Smartmeter data + Python data, Home Usage, Nighttime")
  
foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter((Hour>1 & Hour < 6) | (Hour>21 & Hour<24)) %>% 
  filter(HomeAll<1) %>% 
  summarize(Median= median(HomeAll), Mean=mean(HomeAll), Std=sd(HomeAll))

#   Base daylight

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter(Hour>6 & Hour < 14) %>% 
  filter(HomeAll<1) %>% 
  ggplot(aes(x=Hour, y=HomeAll)) +
  geom_point()+
  labs(title="Jan data, Smartmeter data + Python data, Home Usage, Daytime")

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter(Hour>6 & Hour < 14) %>% 
  filter(HomeAll<1) %>% 
  summarize(Median= median(HomeAll), Mean=mean(HomeAll), Std=sd(HomeAll))

#   Base afternoon

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter(Hour>16 & Hour < 19) %>% 
  filter(HomeAll<1) %>% 
  ggplot(aes(x=Hour, y=HomeAll)) +
  geom_point()+
  labs(title="Jan data, Smartmeter data + Python data, Home Usage, Afternoon")

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter(Hour>16 & Hour < 19) %>% 
  filter(HomeAll<1) %>% 
  summarize(Median= median(HomeAll), Mean=mean(HomeAll), Std=sd(HomeAll))
  
#   A/C

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
 # filter(Hour>16 & Hour < 19) %>% 
  filter(HomeAll>1.9) %>%
  filter(HomeAll<2.2) %>%
  ggplot(aes(x=Hour, y=HomeAll)) +
  geom_point()+
  labs(title="Jan data, Smartmeter data + Python data, Home Usage, A/C")

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter(HomeAll>1.9) %>%
  filter(HomeAll<2.2) %>%
  summarize(Median= median(HomeAll), Mean=mean(HomeAll), Std=sd(HomeAll))
  
foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter(HomeAll>1.9) %>%
  filter(HomeAll<2.2) %>%
  mutate(Dt=Hour-lag(Hour)) %>% 
  filter(Dt>0) %>% 
  ggplot(aes(x=Dt)) +
  geom_histogram()

#   Tesla

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter(Hour < 3) %>% 
  filter(HomeAll>3) %>%
  ggplot(aes(x=Hour, y=HomeAll)) +
  geom_point()+
  labs(title="Jan data, Smartmeter data + Python data, Home Usage, Tesla")

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter(Hour < 3) %>% 
  filter(HomeAll>3) %>%
  summarize(Median= median(HomeAll), Mean=mean(HomeAll), Std=sd(HomeAll))


```

##      Now use old python data

```{r repeat with old data}

Smart <- readRDS(paste0(path, "Smart.rds")) %>% 
  filter(Date<mdy_hm("9-30-2022 00:00"))  

Tesla <- Solar_old %>% 
  filter(Timestamp>mdy_hm("1-1-2021 00:00")) %>% 
  filter(Timestamp<mdy_hm("9-30-2022 00:00"))  
  
Smart %>% 
  left_join(. ,Tesla , by=c("Date"="Timestamp")) %>%
  # filter(Date>mdy_hm("11-1-2021 00:00")) %>% 
  # filter(Date<mdy_hm("11-30-2021 00:00")) %>%   
  mutate(UsageMeter = Consumption - Generation) %>% 
  mutate(HomeAll = Consumption - Generation + kWh) %>% 
  mutate(GenVsSolar = Generation - kWh) %>% 
    # select(Date, HomeAll, Consumption, Generation, kWh, UsageMeter) %>%
    select(Date, HomeAll) %>%
    # select(Date, GenVsSolar, Generation, kWh) %>%
  filter(HomeAll<2.8) %>% 
  # head(1000) %>% 
  pivot_longer(!Date, names_to = "Calculation", values_to="Values") %>%
  ggplot(aes(x=Date)) +
  # geom_line(aes(y=Values, color=Calculation))+
  geom_point(aes(y=Values, color=Calculation), size=0.1)+
  labs(title="Smartmeter data + Python data, Home Usage")

foo2 <-  Smart %>% 
  left_join(. ,Tesla , by=c("Date"="Timestamp")) %>%
  mutate(UsageMeter = Consumption - Generation) %>% 
  mutate(HomeAll = Consumption - Generation + kWh) %>% 
  mutate(GenVsSolar = Generation - kWh) %>% 
  select(Date, HomeAll, Consumption, Generation, kWh, UsageMeter, GenVsSolar,
         Hour, Month, Day) %>% 
  mutate(Vacation=if_else(lubridate::as_date(Date) %in% Vaca, TRUE, FALSE)) %>% 
  filter(!is.na(Hour)) %>% 
  left_join(., Weather_trp, by="Date")

#     For base look at 1 AM - 6 AM, 9 PM - 12 PM

foo2 %>% 
  filter((Hour>1 & Hour < 6) | (Hour>21 & Hour<24)) %>% 
  filter(HomeAll<1) %>% 
  filter(HomeAll>0.01) %>% 
  # filter(Vacation) %>% 
  ggplot(aes(x=Hour, y=HomeAll, color=Vacation)) +
  geom_point(size=0.1)+
  geom_hline(yintercept=0.33) +
  facet_wrap(vars(Month), nrow=3) +
  labs(title="Smartmeter data + Python data, Home Usage, Nighttime, No Vaca")

foo2 %>% 
  # filter((Hour>1 & Hour < 6)) %>% 
  # filter(HomeAll<1) %>% 
  filter(HomeAll>0.01) %>% 
  filter(Month==11) %>%
  # filter(between(Day, 8, 15)) %>% 
  # filter(!Vacation) %>% 
  ggplot(aes(x=Date, y=HomeAll, color=Vacation)) +
  geom_point(size=0.05)+
  geom_hline(yintercept=0.33) +
  labs(title="Smartmeter data + Python data, Home Usage, Nighttime, No Vaca")

library(gt)
  
foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter((Hour>1 & Hour < 6) | (Hour>21 & Hour<24)) %>% 
  filter(HomeAll>0.01) %>% 
  filter(HomeAll<0.33) %>% # picked based on new data 
  group_by(Month, Vacation) %>% 
    summarize(Median= median(HomeAll), Mean=mean(HomeAll), Std=sd(HomeAll)) %>% 
  ungroup() %>% 
  arrange(Vacation) %>% 
  mutate(Monname=month.abb[Month]) %>% 
  mutate(Vaca=if_else(Vacation, "On Vacation", "At Home")) %>% 
  select(Monname, Mean, Std, Vaca) %>% 
  gt(groupname_col = "Vaca") %>% 
  fmt_number(
    columns = c(Mean, Std),
    decimals=3
  ) %>% 
  cols_label(
    Monname = "Month"
  ) %>% 
  tab_options(
    column_labels.border.top.width = px(3),
    column_labels.border.top.color = "transparent",
    table.border.top.color = "transparent",
    table.border.bottom.color = "transparent",
    data_row.padding = px(3),
    source_notes.font.size = 12,
    heading.align = "left",
    #Adjust grouped rows to make them stand out
    row_group.background.color = "grey")

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter((Hour>1 & Hour < 6) | (Hour>21 & Hour<24)) %>% 
  filter(HomeAll>0.01) %>% 
  filter(HomeAll<0.33) %>% # picked based on new data 
  group_by(Month, Vacation) %>% 
    summarize(Median= median(HomeAll), Mean=mean(HomeAll), Std=sd(HomeAll)) %>% 
  ungroup() %>% 
  arrange(Vacation) %>% 
  mutate(Monname=factor(month.abb[Month], levels=month.abb)) %>% 
  mutate(Vaca=if_else(Vacation, "On Vacation", "At Home")) %>% 
  select(Monname, Mean, Std, Vaca) %>% 
  ggplot(aes(x=Monname, y=Mean, group=Vaca, color=Vaca))+
  geom_point()+
  geom_smooth()

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter((Hour>1 & Hour < 6) | (Hour>21 & Hour<24)) %>% 
  filter(HomeAll>0.01) %>% 
  filter(HomeAll<0.33) %>% # picked based on new data 
  # group_by(Month, Vacation) %>% 
  #   summarize(Median= median(HomeAll), Mean=mean(HomeAll), Std=sd(HomeAll)) %>% 
  # ungroup() %>% 
  # mutate(Monname=factor(month.abb[Month], levels=month.abb)) %>% 
  mutate(Vaca=if_else(Vacation, "On Vacation", "At Home")) %>% 
  select(HomeAll, Vaca, Temperature) %>%
  ggplot(aes(x=Temperature, y=HomeAll, group=Vaca, color=Vaca))+
  geom_point()+
  geom_smooth()
  
foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter((Hour>1 & Hour < 6) | (Hour>21 & Hour<24)) %>% 
  filter(HomeAll>0.01) %>% 
  filter(HomeAll<0.33) %>% # picked based on new data 
  group_by(Month, Vacation) %>% 
    summarize(Median= median(HomeAll), Mean=mean(HomeAll), Std=sd(HomeAll)) %>% 
  ungroup() %>% 
  arrange(Vacation) %>% 
  mutate(Monname=month.abb[Month]) %>% 
  mutate(Vaca=if_else(Vacation, "On Vacation", "At Home")) %>% 
  select(Monname, Mean, Std, Vaca) %>% 
  pivot_wider(Monname, names_from="Vaca", values_from="Mean") %>% 
  mutate(Diff=`At Home` - `On Vacation`)

```

##        Daytime 06:00 to 14:00

```{r daytime}

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter((Hour>5 & Hour < 14)) %>% 
  filter(HomeAll>0.01) %>% 
  filter(HomeAll<0.33) %>% # picked based on new data 
  group_by(Month, Vacation) %>% 
    summarize(Median= median(HomeAll), Mean=mean(HomeAll), Std=sd(HomeAll)) %>% 
  ungroup() %>% 
  arrange(Vacation) %>% 
  mutate(Monname=month.abb[Month]) %>% 
  mutate(Vaca=if_else(Vacation, "On Vacation", "At Home")) %>% 
  select(Monname, Mean, Std, Vaca) %>% 
  gt(groupname_col = "Vaca") %>% 
  fmt_number(
    columns = c(Mean, Std),
    decimals=3
  ) %>% 
  cols_label(
    Monname = "Month"
  ) %>% 
  tab_options(
    column_labels.border.top.width = px(3),
    column_labels.border.top.color = "transparent",
    table.border.top.color = "transparent",
    table.border.bottom.color = "transparent",
    data_row.padding = px(3),
    source_notes.font.size = 12,
    heading.align = "left",
    #Adjust grouped rows to make them stand out
    row_group.background.color = "grey")

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter((Hour>5 & Hour < 14)) %>% 
  filter(HomeAll>0.01) %>% 
  filter(HomeAll<0.33) %>% # picked based on new data 
  group_by(Month, Vacation) %>% 
    summarize(Median= median(HomeAll), Mean=mean(HomeAll), Std=sd(HomeAll)) %>% 
  ungroup() %>% 
  arrange(Vacation) %>% 
  mutate(Monname=factor(month.abb[Month], levels=month.abb)) %>% 
  mutate(Vaca=if_else(Vacation, "On Vacation", "At Home")) %>% 
  select(Monname, Mean, Std, Vaca) %>% 
  ggplot(aes(x=Monname, y=Mean, group=Vaca, color=Vaca))+
  geom_point()+
  geom_smooth()

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter((Hour>5 & Hour < 14)) %>% 
  filter(HomeAll>0.01) %>% 
  filter(HomeAll<0.33) %>% # picked based on new data 
  # group_by(Month, Vacation) %>% 
  #   summarize(Median= median(HomeAll), Mean=mean(HomeAll), Std=sd(HomeAll)) %>% 
  # ungroup() %>% 
  # mutate(Monname=factor(month.abb[Month], levels=month.abb)) %>% 
  mutate(Vaca=if_else(Vacation, "On Vacation", "At Home")) %>% 
  select(HomeAll, Vaca, Temperature) %>%
  ggplot(aes(x=Temperature, y=HomeAll, group=Vaca, color=Vaca))+
  geom_point()+
  geom_smooth()
  
foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter((Hour>5 & Hour < 14)) %>% 
  filter(HomeAll>0.01) %>% 
  filter(HomeAll<0.33) %>% # picked based on new data 
  group_by(Month, Vacation) %>% 
    summarize(Median= median(HomeAll), Mean=mean(HomeAll), Std=sd(HomeAll)) %>% 
  ungroup() %>% 
  arrange(Vacation) %>% 
  mutate(Monname=month.abb[Month]) %>% 
  mutate(Vaca=if_else(Vacation, "On Vacation", "At Home")) %>% 
  select(Monname, Mean, Std, Vaca) %>% 
  pivot_wider(Monname, names_from="Vaca", values_from="Mean") %>% 
  mutate(Diff=`At Home` - `On Vacation`)

```


##        afternoon 14:00 to 21:00

```{r afternoon}

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter((Hour>13 & Hour < 22)) %>% 
  filter(HomeAll>0.01) %>% 
  filter(HomeAll<0.33) %>% # picked based on new data 
  group_by(Month, Vacation) %>% 
    summarize(Median= median(HomeAll), Mean=mean(HomeAll), Std=sd(HomeAll)) %>% 
  ungroup() %>% 
  arrange(Vacation) %>% 
  mutate(Monname=month.abb[Month]) %>% 
  mutate(Vaca=if_else(Vacation, "On Vacation", "At Home")) %>% 
  select(Monname, Mean, Std, Vaca) %>% 
  gt(groupname_col = "Vaca") %>% 
  fmt_number(
    columns = c(Mean, Std),
    decimals=3
  ) %>% 
  cols_label(
    Monname = "Month"
  ) %>% 
  tab_options(
    column_labels.border.top.width = px(3),
    column_labels.border.top.color = "transparent",
    table.border.top.color = "transparent",
    table.border.bottom.color = "transparent",
    data_row.padding = px(3),
    source_notes.font.size = 12,
    heading.align = "left",
    #Adjust grouped rows to make them stand out
    row_group.background.color = "grey")

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter((Hour>13 & Hour < 22)) %>% 
  filter(HomeAll>0.01) %>% 
  filter(HomeAll<0.33) %>% # picked based on new data 
  group_by(Month, Vacation) %>% 
    summarize(Median= median(HomeAll), Mean=mean(HomeAll), Std=sd(HomeAll)) %>% 
  ungroup() %>% 
  arrange(Vacation) %>% 
  mutate(Monname=factor(month.abb[Month], levels=month.abb)) %>% 
  mutate(Vaca=if_else(Vacation, "On Vacation", "At Home")) %>% 
  select(Monname, Mean, Std, Vaca) %>% 
  ggplot(aes(x=Monname, y=Mean, group=Vaca, color=Vaca))+
  geom_point()+
  geom_smooth()

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter((Hour>13 & Hour < 22)) %>% 
  filter(HomeAll>0.01) %>% 
  filter(HomeAll<0.33) %>% # picked based on new data 
  # group_by(Month, Vacation) %>% 
  #   summarize(Median= median(HomeAll), Mean=mean(HomeAll), Std=sd(HomeAll)) %>% 
  # ungroup() %>% 
  # mutate(Monname=factor(month.abb[Month], levels=month.abb)) %>% 
  mutate(Vaca=if_else(Vacation, "On Vacation", "At Home")) %>% 
  select(HomeAll, Vaca, Temperature) %>%
  ggplot(aes(x=Temperature, y=HomeAll, group=Vaca, color=Vaca))+
  geom_point()+
  geom_smooth()
  
foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter((Hour>13 & Hour < 22)) %>% 
  filter(HomeAll>0.01) %>% 
  filter(HomeAll<0.33) %>% # picked based on new data 
  group_by(Month, Vacation) %>% 
    summarize(Median= median(HomeAll), Mean=mean(HomeAll), Std=sd(HomeAll)) %>% 
  ungroup() %>% 
  arrange(Vacation) %>% 
  mutate(Monname=month.abb[Month]) %>% 
  mutate(Vaca=if_else(Vacation, "On Vacation", "At Home")) %>% 
  select(Monname, Mean, Std, Vaca) %>% 
  pivot_wider(Monname, names_from="Vaca", values_from="Mean") %>% 
  mutate(Diff=`At Home` - `On Vacation`)

```

##        HVAC

Need to come with hours per day active as a function of temperature and vacation
as well as the kWh when active. Both for heating and cooling.

```{r HVAC}

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter(HomeAll>0.25) %>% 
  filter(HomeAll<2.0) %>% # picked based on new data 
  filter(Temperature>70) %>% 
  mutate(Vaca=if_else(Vacation, "On Vacation", "At Home")) %>% 
  select(HomeAll, Vaca, Temperature) %>%
  ggplot(aes(x=Temperature, y=HomeAll, group=Vaca, color=Vaca))+
  geom_point()+
  geom_smooth(method="lm", color="black")

foo2 %>% 
  mutate(Hour=hour(Date) + trunc(minute(Date)/15)*0.25) %>%
  filter(HomeAll>0.25) %>% 
  filter(HomeAll<2.0) %>% # picked based on new data 
  filter(Temperature>75) %>% 
  filter(Hour < 10) %>% 
  filter(Vacation!="On Vacation") %>% 
  select(HomeAll, Temperature) %>%
  ggplot(aes(x=Temperature, y=HomeAll))+
  geom_point(size=0.05)+
  geom_smooth(method="lm", color="black")

Solar_new_all <- readRDS(paste0(path, "Solar_new.rds")) %>% 
  mutate(Hour=hour(Timestamp) + trunc(minute(Timestamp)/5)/12) %>% 
  group_by(date(Timestamp), Hour) %>% #    Convert to 15 minute kWh
    summarize(Timestamp=first(Timestamp),
              SolarkWh=mean(Solar_W)/1000,
              BatterykWh=mean(Battery_W)/1000,
              GridkWh=mean(Grid_W)/1000) %>% 
  ungroup() %>% 
  select(-`date(Timestamp)`) %>% 
  mutate(HomekWh = GridkWh + SolarkWh + BatterykWh)

Solar_new_all %>% 
  filter(date(Timestamp) == mdy("1-18-2023")) %>% 
  ggplot(aes(x=Timestamp, y=HomekWh))+
  geom_point()+
  geom_line()
  
Solar_new_all %>% 
  filter(date(Timestamp) == mdy("1-18-2023")) %>% 
  filter(Hour>.1 & Hour<1.4) %>% 
  # summarize(Answer=mean(HomekWh))
  ggplot(aes(x=Timestamp, y=HomekWh))+
  geom_point()+
  geom_line()

Solar_new_all %>% 
  filter(date(Timestamp) == mdy("1-18-2023")) %>% 
  mutate(Med=zoo::rollmedian(HomekWh, k=7, fill=c(0,0,0))) %>% 
  filter(Hour>1.5) %>% 
  ggplot(aes(x=Timestamp, y=HomekWh))+
  geom_point()+
  geom_line(aes(y=Med))+
  geom_smooth(aes(y=Med))

Solar_new_all %>% 
  filter(date(Timestamp) == mdy("1-18-2023")) %>% 
  filter(Hour>1.0) %>%
  filter(HomekWh<1.5) %>% 
  # summarize(Answer=mean(HomekWh))
  ggplot(aes(x=Timestamp, y=HomekWh))+
  geom_point()+
  geom_line()+
  geom_smooth()

# Jan_warm <- Solar_new_all %>% 
#   filter(date(Timestamp) == mdy("1-17-2023")) %>% 
#   mutate(Base = case_when(
#     between(Timestamp, mdy_hm("1-17-2023 00:00"), mdy_hm("1-17-2023 06:00")) ~ 0.5,
#     between(Timestamp, mdy_hm("1-17-2023 06:00"), mdy_hm("1-17-2023 09:00")) ~ 0.65,
#     between(Timestamp, mdy_hm("1-17-2023 09:00"), mdy_hm("1-17-2023 15:00")) ~ 0.9,
#     between(Timestamp, mdy_hm("1-17-2023 15:00"), mdy_hm("1-17-2023 22:00")) ~ 1.0,
#     between(Timestamp, mdy_hm("1-17-2023 22:00"), mdy_hm("1-17-2023 24:00")) ~ 0.5
#   ))

Jan_warm <- Solar_new_all %>% 
  filter(date(Timestamp) == mdy("1-18-2023")) %>% 
  mutate(Base = case_when(
    between(Timestamp, mdy_hm("1-18-2023 00:00"), mdy_hm("1-18-2023 06:00")) ~ 0.4,
    between(Timestamp, mdy_hm("1-18-2023 06:00"), mdy_hm("1-18-2023 09:00")) ~ 0.55,
    between(Timestamp, mdy_hm("1-18-2023 09:00"), mdy_hm("1-18-2023 15:00")) ~ 0.9,
    between(Timestamp, mdy_hm("1-18-2023 15:00"), mdy_hm("1-18-2023 22:00")) ~ 1.0,
    between(Timestamp, mdy_hm("1-18-2023 22:00"), mdy_hm("1-18-2023 24:00")) ~ 0.5
  ))

Jan_warm %>% 
  mutate(Unbase=HomekWh-Base) %>% 
  ggplot(aes(x=Timestamp, y=Unbase))+
  geom_point()+
  geom_line()

#   Calc and flag inflection points

Jan_warm %>% 
  mutate(Unbase=HomekWh-Base) %>% 
  mutate(Deriv=(lead(Unbase, default=0)-lag(Unbase, default=0))/10) %>% 
  mutate(Flag=as_factor(if_else(abs(Deriv)>0.025 & Unbase<0.15,"red", "black"))) %>% 
  ggplot(aes(x=Timestamp, y=Unbase))+
  geom_point(aes(color=Flag))+
  scale_color_manual(values = c("red" = "red",
                                "black"="black")) +
  geom_line()

Jan_warm %>% 
  mutate(Unbase=HomekWh-Base) %>% 
  mutate(Deriv=(lead(Unbase, default=0)-lag(Unbase, default=0))/10) %>% 
  mutate(Flag=as_factor(if_else(abs(Deriv)>0.025 & Unbase<0.15,"red", "black"))) %>% 
  filter(Flag=="red") %>% 
  mutate(Width=Hour-lag(Hour)) %>% 
  filter(Width<0.8) %>% 
  ggplot(aes(x=Timestamp, y=Width))+
  geom_point()+
  geom_smooth(method="lm")




```











